var it=Object.defineProperty;var at=(x,t,e)=>t in x?it(x,t,{enumerable:!0,configurable:!0,writable:!0,value:e}):x[t]=e;var f=(x,t,e)=>at(x,typeof t!="symbol"?t+"":t,e);(function(){const t=document.createElement("link").relList;if(t&&t.supports&&t.supports("modulepreload"))return;for(const i of document.querySelectorAll('link[rel="modulepreload"]'))s(i);new MutationObserver(i=>{for(const a of i)if(a.type==="childList")for(const o of a.addedNodes)o.tagName==="LINK"&&o.rel==="modulepreload"&&s(o)}).observe(document,{childList:!0,subtree:!0});function e(i){const a={};return i.integrity&&(a.integrity=i.integrity),i.referrerPolicy&&(a.referrerPolicy=i.referrerPolicy),i.crossOrigin==="use-credentials"?a.credentials="include":i.crossOrigin==="anonymous"?a.credentials="omit":a.credentials="same-origin",a}function s(i){if(i.ep)return;i.ep=!0;const a=e(i);fetch(i.href,a)}})();class m{static distance(t,e){const s=t.x-e.x,i=t.y-e.y;return Math.sqrt(s*s+i*i)}static normalize(t){const e=Math.sqrt(t.x*t.x+t.y*t.y);return e===0?{x:0,y:0}:{x:t.x/e,y:t.y/e}}static rotate(t,e){const s=Math.cos(e),i=Math.sin(e);return{x:t.x*s-t.y*i,y:t.x*i+t.y*s}}static clamp(t,e,s){return Math.min(Math.max(t,e),s)}static lerp(t,e,s){return t+(e-t)*s}static randomBetween(t,e){return Math.random()*(e-t)+t}static generateId(){return Math.random().toString(36).substr(2,9)}}class F{static generateAsteroidField(t,e){const s=[],i=t.asteroidCount*10;for(let a=0;a<i&&s.length<t.asteroidCount;a++){const o={x:m.randomBetween(-t.worldWidth/2,t.worldWidth/2),y:m.randomBetween(-t.worldHeight/2,t.worldHeight/2)};if(m.distance(o,{x:0,y:0})<150)continue;if(!s.some(n=>m.distance(o,n.position)<t.minSpacing)){const n=m.randomBetween(t.asteroidSizeMin,t.asteroidSizeMax);s.push(this.createAsteroid(o,n,t))}}return this.createCosmicEggs(s,e||t.cosmicEggMultiplier||1),s}static createCosmicEggs(t,e=1){if(t.length<3)return;const s=Math.floor(m.randomBetween(3,7)),i=Math.max(1,Math.floor(s*e)),a=new Set;for(;a.size<Math.min(i,t.length);){const r=Math.floor(Math.random()*t.length);a.add(r)}const o=["spider","centipede","beetle"];a.forEach(r=>{const n=t[r];n.isCosmicEgg=!0,n.monsterType=o[Math.floor(Math.random()*o.length)],n.health+=2,n.maxHealth+=2,n.lastPulseTime=performance.now()/1e3+Math.random()*11,n.pulsePhase=0}),console.log(`Generated ${a.size} cosmic eggs containing space monsters! (${Math.round(e*100)}% of normal)`)}static createAsteroid(t,e,s){const i=Math.floor(m.randomBetween(6,11)),a=[];for(let u=0;u<i;u++){const d=u/i*Math.PI*2,y=m.randomBetween(.7,1.3),S=e*y;a.push({x:Math.cos(d)*S,y:Math.sin(d)*S})}const o=(e-s.asteroidSizeMin)/(s.asteroidSizeMax-s.asteroidSizeMin),r=3,n=6,c=Math.floor(r+o*(n-r))+Math.floor(Math.random()*2),l=Math.max(r,Math.min(n,c));return{id:m.generateId(),position:t,radius:e,vertices:a,health:l,maxHealth:l,dropsPowerGem:Math.random()<s.powerGemDropRate,isCosmicEgg:!1}}}class E{static createShip(t){const e=(t==null?void 0:t.stats)||{maxEnergy:100,energyRechargeRate:15,maxHullStrength:100,maxCargoMaterials:30,maxCargoGems:20,weaponDamage:1,weaponFireRate:.15};return{position:{x:0,y:0},velocity:{x:0,y:0},rotation:0,radius:12,energy:e.maxEnergy,maxEnergy:e.maxEnergy,energyRechargeRate:e.energyRechargeRate,hullStrength:e.maxHullStrength,maxHullStrength:e.maxHullStrength,cargoMaterials:0,cargoGems:0,maxCargoMaterials:e.maxCargoMaterials,maxCargoGems:e.maxCargoGems,weaponDamage:e.weaponDamage,weaponFireRate:e.weaponFireRate,lastFireTime:0,bombs:3,maxBombs:10,isInvincible:!1,invincibilityEndTime:0,meleeCharging:!1,meleeChargeStartTime:0,meleeWarningEndTime:0,isOutOfBounds:!1}}static updateShip(t,e,s){const i=performance.now()/1e3;if(t.isInvincible&&i>=t.invincibilityEndTime&&(t.isInvincible=!1,console.log("Invincibility ended")),e.rotateLeft&&(t.rotation-=this.ROTATION_SPEED*s),e.rotateRight&&(t.rotation+=this.ROTATION_SPEED*s),e.thrust&&t.energy>0){const o=m.rotate({x:0,y:-this.THRUST_POWER},t.rotation);t.velocity.x+=o.x*s,t.velocity.y+=o.y*s,t.energy=Math.max(0,t.energy-this.ENERGY_DRAIN_MOVE*s)}if(e.reverse&&t.energy>0){const o=m.rotate({x:0,y:this.THRUST_POWER*.7},t.rotation);t.velocity.x+=o.x*s,t.velocity.y+=o.y*s,t.energy=Math.max(0,t.energy-this.ENERGY_DRAIN_MOVE*s)}if(Math.sqrt(t.velocity.x**2+t.velocity.y**2)>this.MAX_VELOCITY){const o=m.normalize(t.velocity);t.velocity.x=o.x*this.MAX_VELOCITY,t.velocity.y=o.y*this.MAX_VELOCITY}t.velocity.x*=this.FRICTION,t.velocity.y*=this.FRICTION,t.position.x+=t.velocity.x*s,t.position.y+=t.velocity.y*s,t.energy=Math.min(t.maxEnergy,t.energy+t.energyRechargeRate*s)}static updatePassiveGeneration(t,e,s){const i=e.filter(a=>a.owner==="player");if(i.length>0){let a=0;for(const o of i)a+=o.bases*.5;if(t.cargoMaterials<t.maxCargoMaterials){const o=a*s,r=Math.min(o,t.maxCargoMaterials-t.cargoMaterials);t.cargoMaterials+=r}}}static canFire(t,e){return t.energy>=this.ENERGY_DRAIN_FIRE&&e-t.lastFireTime>=t.weaponFireRate&&!t.meleeCharging&&!t.isOutOfBounds}static consumeFireEnergy(t,e){t.energy-=this.ENERGY_DRAIN_FIRE,t.lastFireTime=e}static addResource(t,e){if(e==="rawMaterial")if(t.hullStrength<t.maxHullStrength){const i=Math.min(10,t.maxHullStrength-t.hullStrength);return t.hullStrength+=i,console.log(`Hull repaired! +${i} hull strength (${Math.round(t.hullStrength)}/${t.maxHullStrength})`),!0}else{const s=t.cargoMaterials+t.cargoGems,i=t.maxCargoMaterials+t.maxCargoGems;if(s>=i)return console.log(`Cannot collect material: total cargo full (${s}/${i})`),!1;t.cargoMaterials++,console.log(`Material collected! Materials: ${t.cargoMaterials}, Total cargo: ${s+1}/${i}`)}else if(e==="powerGem")if(t.energy<t.maxEnergy*.5)t.energy=t.maxEnergy,console.log("Power gem used to refill energy!");else{const s=t.cargoMaterials+t.cargoGems,i=t.maxCargoMaterials+t.maxCargoGems;if(s>=i)return console.log(`Cannot collect gem: total cargo full (${s}/${i})`),!1;t.cargoGems++,console.log(`Power gem collected! Gems: ${t.cargoGems}, Total cargo: ${s+1}/${i}`)}return!0}static getTotalCargoSpace(t){return t.maxCargoMaterials+t.maxCargoGems}static canLaunchBomb(t){return t.bombs>0&&!t.isOutOfBounds}static canBuyBomb(t){return t.bombs<t.maxBombs&&t.cargoMaterials>=10}static launchBomb(t){t.bombs>0&&t.bombs--}static buyBomb(t){return t.cargoMaterials>=10&&t.bombs<t.maxBombs?(t.cargoMaterials-=10,t.bombs++,!0):!1}static canUseMeleeWeapon(t){return t.cargoGems>=this.MELEE_GEM_COST&&!t.meleeCharging&&!t.isOutOfBounds}static activateMeleeWeapon(t){if(!this.canUseMeleeWeapon(t))return!1;const e=performance.now()/1e3;return t.cargoGems-=this.MELEE_GEM_COST,t.isInvincible=!0,t.meleeCharging=!0,t.meleeChargeStartTime=e,t.invincibilityEndTime=e+this.MELEE_INVINCIBILITY_DURATION,t.meleeWarningEndTime=e+this.MELEE_WARNING_DURATION,console.log(`Emergency Melee activated! Invincible for ${this.MELEE_INVINCIBILITY_DURATION} seconds. Gems: ${t.cargoGems}`),!0}static isMeleeReady(t){return t.meleeCharging?performance.now()/1e3-t.meleeChargeStartTime>=this.MELEE_INVINCIBILITY_DURATION:!1}}f(E,"THRUST_POWER",300),f(E,"MAX_VELOCITY",600),f(E,"ROTATION_SPEED",4),f(E,"ENERGY_DRAIN_MOVE",2),f(E,"ENERGY_DRAIN_FIRE",10),f(E,"FRICTION",.99),f(E,"MELEE_GEM_COST",10),f(E,"MELEE_INVINCIBILITY_DURATION",1.5),f(E,"MELEE_WARNING_DURATION",2);class L{static checkShipAsteroidCollision(t,e){for(const s of e)if(this.circleCollision(t.position,t.radius,s.position,s.radius))return s;return null}static checkShipEnemyCollision(t,e){for(const s of e)if(s.active&&this.circleCollision(t.position,t.radius,s.position,s.radius))return s;return null}static checkShipProjectileCollision(t,e){const s=[];for(const i of e)i.active&&(i.damage>=1||this.circleCollision(t.position,t.radius,i.position,i.radius)&&(s.push(i),i.active=!1));return s}static circleCollision(t,e,s,i){return m.distance(t,s)<e+i}static resolveShipEnemyCollision(t,e){if(t.isInvincible)return console.log("Ship is invincible - no collision damage!"),{enemyDestroyed:!1,shipDestroyed:!1};if(e.enemyType&&e.enemyType!=="normal"&&e.graceEndTime&&performance.now()/1e3<e.graceEndTime){const o=t.position.x-e.position.x,r=t.position.y-e.position.y,n=Math.sqrt(o*o+r*r);if(n>0){const c=o/n,l=r/n,u=100;t.velocity.x+=c*u,t.velocity.y+=l*u,console.log("Bounced off space monster during grace period!")}return{enemyDestroyed:!1,shipDestroyed:!1}}e.active=!1;const s=t.maxEnergy/3;t.energy-=s;const i=t.energy<t.maxEnergy/3;return i&&(t.hullStrength=0),console.log(`Ship-Enemy collision! Energy lost: ${Math.round(s)}, Remaining: ${Math.round(t.energy)}`),i&&console.log("Ship destroyed due to low energy!"),{enemyDestroyed:!0,shipDestroyed:i}}static resolveShipAsteroidCollision(t,e){const s=t.position.x-e.position.x,i=t.position.y-e.position.y,a=Math.sqrt(s*s+i*i);if(a===0)return;const o=s/a,r=i/a,n=t.radius+e.radius-a;t.position.x+=o*n,t.position.y+=r*n;const c=t.velocity.x*o+t.velocity.y*r;t.velocity.x-=2*c*o*.8,t.velocity.y-=2*c*r*.8;const l=Math.sqrt(t.velocity.x**2+t.velocity.y**2),u=Math.min(l*.05,8);t.hullStrength=Math.max(0,t.hullStrength-u)}static resolveShipProjectileHit(t,e){if(t.isInvincible){console.log("Ship is invincible - no projectile damage!");return}const s=e.damage*20||10;t.hullStrength=Math.max(0,t.hullStrength-s),console.log(`Ship hit by enemy projectile! Hull damage: ${s}, Hull remaining: ${Math.round(t.hullStrength)}`),t.hullStrength<=0&&console.log("Ship destroyed by enemy fire!")}}class I{static updateCamera(t,e,s){const i=e.position.x,a=e.position.y;t.x=m.lerp(t.x,i,this.FOLLOW_SPEED*s),t.y=m.lerp(t.y,a,this.FOLLOW_SPEED*s)}static worldToScreen(t,e,s){return{x:t.x-e.x+s.width/2,y:t.y-e.y+s.height/2}}static screenToWorld(t,e,s){return{x:t.x+e.x-s.width/2,y:t.y+e.y-s.height/2}}}f(I,"FOLLOW_SPEED",2);class A{static createInitialUpgradeState(){return{shipUpgrades:{energyCapacity:0,energyRecharge:0,hullStrength:0,cargoCapacity:0,weaponDamage:0,weaponFireRate:0},baseUpgrades:{hpBonus:0,regenBonus:0}}}static calculateUpgradeCost(t,e){if(e>=this.MAX_UPGRADE_LEVEL)return{materials:-1,gems:-1};const s=this.BASE_COSTS[t],i=Math.pow(this.COST_SCALING,e);return{materials:Math.ceil(s.materials*i),gems:Math.ceil(s.gems*i)}}static canAffordUpgrade(t,e,s){const i=this.calculateUpgradeCost(e,s);return i.materials===-1?!1:t.cargoMaterials>=i.materials&&t.cargoGems>=i.gems}static purchaseShipUpgrade(t,e,s){const i=e.shipUpgrades[s],a=this.calculateUpgradeCost(s,i);return a.materials===-1||!this.canAffordUpgrade(t,s,i)?!1:(t.cargoMaterials-=a.materials,t.cargoGems-=a.gems,e.shipUpgrades[s]++,this.applyShipUpgrades(t,e),console.log(`Upgraded ${s} to level ${e.shipUpgrades[s]}! Cost: ${a.materials} materials, ${a.gems} gems`),!0)}static purchaseBaseUpgrade(t,e,s,i){const a=s==="baseHP"?"hpBonus":"regenBonus",o=e.baseUpgrades[a],r=this.calculateUpgradeCost(s,o);return r.materials===-1||!this.canAffordUpgrade(t,s,o)?!1:(t.cargoMaterials-=r.materials,t.cargoGems-=r.gems,e.baseUpgrades[a]++,this.applyBaseUpgrades(e,i),console.log(`Upgraded ${s} to level ${e.baseUpgrades[a]}! Cost: ${r.materials} materials, ${r.gems} gems`),!0)}static applyShipUpgrades(t,e){const s=e.shipUpgrades.energyCapacity*20,i=e.shipUpgrades.energyRecharge*3,a=e.shipUpgrades.hullStrength*25,o=e.shipUpgrades.cargoCapacity*10,r=e.shipUpgrades.weaponDamage*.2,n=e.shipUpgrades.weaponFireRate*.02;t.maxEnergy+=s,t.energyRechargeRate+=i,t.maxHullStrength+=a,t.maxCargoMaterials+=Math.floor(o*.6),t.maxCargoGems+=Math.floor(o*.4),t.weaponDamage+=r,t.weaponFireRate=Math.max(.05,t.weaponFireRate-n)}static applyBaseUpgrades(t,e){const s=t.baseUpgrades.hpBonus*15,i=t.baseUpgrades.regenBonus*2;for(const a of e)if(a.owner==="player"){const o=100+a.bases*25;a.maxHP=o+s,a.regenRate=5+i,a.currentHP<a.maxHP&&(a.currentHP=Math.min(a.maxHP,a.currentHP+s))}}static getUpgradeBenefit(t){switch(t){case"energyCapacity":return"+20 Energy Capacity";case"energyRecharge":return"+3 Energy Recharge Rate";case"hullStrength":return"+25 Hull Strength";case"cargoCapacity":return"+10 Cargo Capacity";case"weaponDamage":return"+0.2 Weapon Damage";case"weaponFireRate":return"-0.02s Fire Rate (faster)";case"baseHP":return"+15 Base HP per Planet";case"baseRegen":return"+2 Base Regen per Planet";default:return"Unknown Upgrade"}}static isMaxLevel(t,e){return e==="baseHP"?t.baseUpgrades.hpBonus>=this.MAX_UPGRADE_LEVEL:e==="baseRegen"?t.baseUpgrades.regenBonus>=this.MAX_UPGRADE_LEVEL:t.shipUpgrades[e]>=this.MAX_UPGRADE_LEVEL}}f(A,"BASE_COSTS",{energyCapacity:{materials:15,gems:3},energyRecharge:{materials:12,gems:4},hullStrength:{materials:20,gems:2},cargoCapacity:{materials:10,gems:2},weaponDamage:{materials:25,gems:5},weaponFireRate:{materials:18,gems:4},baseHP:{materials:30,gems:5},baseRegen:{materials:20,gems:3}}),f(A,"COST_SCALING",1.5),f(A,"MAX_UPGRADE_LEVEL",10);class v{static createInitialBotState(){return{bots:[],maxBots:3,purchaseCost:{materials:15,gems:2},cargoThreshold:25}}static canPurchaseBot(t,e){const i=t.cargoMaterials+t.cargoGems>=e.cargoThreshold,a=e.bots.length<e.maxBots,o=t.cargoMaterials>=e.purchaseCost.materials&&t.cargoGems>=e.purchaseCost.gems;return i&&a&&o}static purchaseBot(t,e,s="defense"){if(!this.canPurchaseBot(t,e))return!1;t.cargoMaterials-=e.purchaseCost.materials,t.cargoGems-=e.purchaseCost.gems;const i=this.createBot(t.position,s,e.bots.length);return e.bots.push(i),console.log(`${s} bot purchased! Bots: ${e.bots.length}/${e.maxBots}, Cost: ${e.purchaseCost.materials} materials, ${e.purchaseCost.gems} gems`),!0}static createBot(t,e,s){const i=s/3*Math.PI*2+Math.PI/6;return{id:m.generateId(),position:{...t},targetPosition:{...t},rotation:0,radius:8,lastFireTime:0,fireRate:this.BOT_FIRE_RATE,damage:1,range:this.BOT_RANGE,collectRange:this.BOT_COLLECT_RANGE,energyDrainPerShot:this.BOT_ENERGY_DRAIN_SHOT,energyDrainPerSecond:this.BOT_ENERGY_DRAIN_SECOND,orbitAngle:i,orbitRadius:this.BOT_ORBIT_RADIUS+s*15,type:e}}static updateBots(t,e,s,i,a,o){const r=[],n=[],c={enemies:[],asteroids:[]},l=performance.now()/1e3;for(let u=0;u<t.bots.length;u++){const d=t.bots[u];d.orbitAngle+=o*.5,d.targetPosition={x:e.position.x+Math.cos(d.orbitAngle)*d.orbitRadius,y:e.position.y+Math.sin(d.orbitAngle)*d.orbitRadius};const y={x:d.targetPosition.x-d.position.x,y:d.targetPosition.y-d.position.y};if(Math.sqrt(y.x*y.x+y.y*y.y)>5){const p=m.normalize(y);d.position.x+=p.x*this.BOT_MOVE_SPEED*o*60,d.position.y+=p.y*this.BOT_MOVE_SPEED*o*60}if(e.energy=Math.max(0,e.energy-d.energyDrainPerSecond*o),d.type==="defense"||d.type==="mining"){const p=this.findNearestEnemy(d.position,s,d.range);if(p&&l-d.lastFireTime>=d.fireRate&&e.energy>=d.energyDrainPerShot){const h={x:p.position.x-d.position.x,y:p.position.y-d.position.y};d.rotation=Math.atan2(h.x,-h.y);const g=this.createBotProjectile(d,e.weaponDamage);r.push(g),e.energy-=d.energyDrainPerShot,d.lastFireTime=l}}if(d.type==="mining"||d.type==="defense"){const p=this.findNearbyResources(d.position,i,d.collectRange);for(const h of p)h.collected||this.tryCollectResource(e,h)&&(h.collected=!0,n.push(h))}for(const p of s){if(!p.active)continue;if(m.distance(d.position,p.position)<d.radius+p.radius){const g=e.weaponDamage*2;p.health-=g,p.health<=0&&(p.active=!1,c.enemies.push(p)),console.log(`Bot dealt ${g} contact damage to enemy! Enemy HP: ${p.health}`)}}for(const p of a)if(m.distance(d.position,p.position)<d.radius+p.radius){const g=Math.floor(e.weaponDamage*2);p.health-=g,p.health<=0&&c.asteroids.push(p),console.log(`Bot dealt ${g} contact damage to asteroid! Asteroid HP: ${p.health}`)}}return{projectiles:r,collectedResources:n,contactDamageResults:c}}static findNearestEnemy(t,e,s){let i=null,a=s;for(const o of e){if(!o.active)continue;const r=m.distance(t,o.position);r<a&&(i=o,a=r)}return i}static findNearbyResources(t,e,s){const i=[];for(const a of e){if(a.collected)continue;m.distance(t,a.position)<=s&&i.push(a)}return i}static tryCollectResource(t,e){const s=t.cargoMaterials+t.cargoGems,i=t.maxCargoMaterials+t.maxCargoGems;if(s>=i)return!1;if(e.type==="rawMaterial")if(t.hullStrength<t.maxHullStrength){const o=Math.min(10,t.maxHullStrength-t.hullStrength);return t.hullStrength+=o,!0}else return t.cargoMaterials++,!0;else if(e.type==="powerGem")return t.energy<t.maxEnergy*.5?(t.energy=t.maxEnergy,!0):(t.cargoGems++,!0);return!1}static createBotProjectile(t,e){const s=t.radius+3,i={x:Math.sin(t.rotation),y:-Math.cos(t.rotation)};return{id:m.generateId(),position:{x:t.position.x+i.x*s,y:t.position.y+i.y*s},velocity:{x:i.x*250,y:i.y*250},radius:1.5,active:!0,damage:e*this.BOT_DAMAGE_MULTIPLIER,type:"normal"}}static getTotalEnergyDrain(){return 0}static getBotCount(t){return t.bots.length}static getMaxBots(t){return t.maxBots}static canShowPurchaseOption(t,e){return t.cargoMaterials+t.cargoGems>=e.cargoThreshold}}f(v,"BOT_FIRE_RATE",.3),f(v,"BOT_DAMAGE_MULTIPLIER",.6),f(v,"BOT_RANGE",180),f(v,"BOT_COLLECT_RANGE",50),f(v,"BOT_ENERGY_DRAIN_SHOT",5),f(v,"BOT_ENERGY_DRAIN_SECOND",1),f(v,"BOT_ORBIT_RADIUS",60),f(v,"BOT_MOVE_SPEED",3);class M{static toggleUpgradeMenu(){this.uiState.showUpgradeMenu=!this.uiState.showUpgradeMenu,this.uiState.showUpgradeMenu&&(this.uiState.showBotMenu=!1,this.uiState.selectedUpgradeIndex=0)}static toggleBotMenu(){this.uiState.showBotMenu=!this.uiState.showBotMenu,this.uiState.showBotMenu&&(this.uiState.showUpgradeMenu=!1,this.uiState.selectedBotOption=0)}static closeAllMenus(){this.uiState.showUpgradeMenu=!1,this.uiState.showBotMenu=!1,this.uiState.selectedUpgradeIndex=0,this.uiState.selectedBotOption=0}static isUpgradeMenuOpen(){return this.uiState.showUpgradeMenu}static isBotMenuOpen(){return this.uiState.showBotMenu}static switchUpgradeTab(t){this.uiState.selectedUpgradeTab=t,this.uiState.selectedUpgradeIndex=0}static getSelectedUpgradeTab(){return this.uiState.selectedUpgradeTab}static navigateUpgradeMenu(t){if(!this.uiState.showUpgradeMenu)return;const e=this.uiState.selectedUpgradeTab==="ship"?6:2;t==="up"?this.uiState.selectedUpgradeIndex=Math.max(0,this.uiState.selectedUpgradeIndex-1):this.uiState.selectedUpgradeIndex=(this.uiState.selectedUpgradeIndex+1)%e}static navigateBotMenu(t){if(!this.uiState.showBotMenu)return;const e=1;t==="up"?this.uiState.selectedBotOption=Math.max(0,this.uiState.selectedBotOption-1):this.uiState.selectedBotOption=(this.uiState.selectedBotOption+1)%e}static getSelectedUpgradeIndex(){return this.uiState.selectedUpgradeIndex}static getSelectedBotOption(){return this.uiState.selectedBotOption}static getSelectedUpgradeType(){return this.uiState.showUpgradeMenu?this.uiState.selectedUpgradeTab==="ship"?["energyCapacity","energyRecharge","hullStrength","cargoCapacity","weaponDamage","weaponFireRate"][this.uiState.selectedUpgradeIndex]||null:["baseHP","baseRegen"][this.uiState.selectedUpgradeIndex]||null:null}static renderUpgradeMenu(t,e,s,i){if(!this.uiState.showUpgradeMenu)return;const a=500,o=600,r=(e.width-a)/2,n=(e.height-o)/2;t.fillStyle="rgba(0, 0, 0, 0.9)",t.fillRect(r,n,a,o),t.strokeStyle="#00ff00",t.lineWidth=2,t.strokeRect(r,n,a,o),t.fillStyle="#00ff00",t.font="bold 18px monospace",t.textAlign="center",t.fillText("UPGRADES",r+a/2,n+25),this.uiState.selectedUpgradeTab==="ship"?this.renderShipUpgrades(t,r+10,n+50,a-20,s,i):this.renderBaseUpgrades(t,r+10,n+50,a-20,s,i),t.fillStyle="#cccccc",t.font="12px monospace",t.textAlign="center",t.fillText("UP/DOWN or TAB to navigate • ENTER to purchase • U to close",r+a/2,n+o-10),t.textAlign="left"}static renderShipUpgrades(t,e,s,i,a,o){const r=[{key:"energyCapacity",name:"Energy Capacity",current:a.maxEnergy},{key:"energyRecharge",name:"Energy Recharge",current:a.energyRechargeRate},{key:"hullStrength",name:"Hull Strength",current:a.maxHullStrength},{key:"cargoCapacity",name:"Cargo Capacity",current:a.maxCargoMaterials+a.maxCargoGems},{key:"weaponDamage",name:"Weapon Damage",current:a.weaponDamage},{key:"weaponFireRate",name:"Fire Rate",current:a.weaponFireRate}];let n=s;for(let c=0;c<r.length;c++){const l=r[c],u=c===this.uiState.selectedUpgradeIndex,d=o.shipUpgrades[l.key],y=A.calculateUpgradeCost(l.key,d),S=A.canAffordUpgrade(a,l.key,d),p=A.isMaxLevel(o,l.key);if(u?(t.fillStyle="rgba(255, 255, 0, 0.2)",t.fillRect(e+5,n-25,i-10,65),t.strokeStyle="#ffff00",t.lineWidth=2,t.strokeRect(e+5,n-25,i-10,65)):S&&!p&&(t.fillStyle="rgba(0, 255, 0, 0.1)",t.fillRect(e+5,n-25,i-10,65)),t.fillStyle="#ffffff",t.font="bold 14px monospace",t.textAlign="left",t.fillText(`${l.name} (Lv.${d})`,e+10,n),t.fillStyle="#cccccc",t.font="12px monospace",t.fillText(`Current: ${l.current.toFixed(2)}`,e+10,n+16),p)t.fillStyle="#ffaa00",t.fillText("MAX LEVEL",e+10,n+30);else{const h=S?"#00ff00":"#ff4444";t.fillStyle=h,t.fillText(`Cost: ${y.materials} Materials, ${y.gems} Power Gems`,e+10,n+30),t.fillStyle="#88cc88",t.fillText(`${A.getUpgradeBenefit(l.key)}`,e+10,n+44)}n+=70}}static renderBaseUpgrades(t,e,s,i,a,o){const r=[{key:"baseHP",name:"Base HP Bonus",level:o.baseUpgrades.hpBonus},{key:"baseRegen",name:"Base Regen Bonus",level:o.baseUpgrades.regenBonus}];let n=s;for(let c=0;c<r.length;c++){const l=r[c],u=c===this.uiState.selectedUpgradeIndex,d=A.calculateUpgradeCost(l.key,l.level),y=A.canAffordUpgrade(a,l.key,l.level),S=A.isMaxLevel(o,l.key);if(u?(t.fillStyle="rgba(255, 255, 0, 0.3)",t.fillRect(e+5,n-15,i-10,70),t.strokeStyle="#ffff00",t.lineWidth=2,t.strokeRect(e+5,n-15,i-10,70)):y&&!S&&(t.fillStyle="rgba(0, 255, 0, 0.15)",t.fillRect(e+5,n-15,i-10,70)),t.fillStyle="#ffffff",t.font="bold 14px monospace",t.textAlign="left",t.fillText(`${l.name} (Lv.${l.level})`,e+10,n),S)t.fillStyle="#ffaa00",t.font="12px monospace",t.fillText("MAX LEVEL",e+10,n+16);else{const p=y?"#00ff00":"#ff4444";t.fillStyle=p,t.font="12px monospace",t.fillText(`Cost: ${d.materials} Materials, ${d.gems} Power Gems`,e+10,n+16),t.fillStyle="#88cc88",t.fillText(`${A.getUpgradeBenefit(l.key)}`,e+10,n+30)}n+=80}}static renderBotMenu(t,e,s,i){if(!this.uiState.showBotMenu)return;const a=400,o=250,r=(e.width-a)/2,n=(e.height-o)/2;t.fillStyle="rgba(0, 0, 0, 0.9)",t.fillRect(r,n,a,o),t.strokeStyle="#ff8800",t.lineWidth=2,t.strokeRect(r,n,a,o),t.fillStyle="#ff8800",t.font="bold 18px monospace",t.textAlign="center",t.fillText("BOT MANAGEMENT",r+a/2,n+25),t.fillStyle="#ffffff",t.font="14px monospace",t.textAlign="left",t.fillText(`Active Bots: ${i.bots.length}/${i.maxBots}`,r+20,n+50);const c=v.canPurchaseBot(s,i),l=v.canShowPurchaseOption(s,i),u=this.uiState.selectedBotOption===0;if(l){u?(t.fillStyle="rgba(255, 255, 0, 0.3)",t.fillRect(r+10,n+65,a-20,75),t.strokeStyle="#ffff00",t.lineWidth=2,t.strokeRect(r+10,n+65,a-20,75)):c&&(t.fillStyle="rgba(0, 255, 0, 0.15)",t.fillRect(r+10,n+65,a-20,75)),t.fillStyle="#cccccc",t.fillText("Purchase Defense Bot:",r+20,n+80);const d=c?"#00ff00":"#ff4444";t.fillStyle=d,t.fillText(`Cost: ${i.purchaseCost.materials} Materials, ${i.purchaseCost.gems} Power Gems`,r+20,n+98),c?(t.fillStyle="#88cc88",t.fillText("Press ENTER to purchase",r+20,n+130)):i.bots.length>=i.maxBots?(t.fillStyle="#ff4444",t.fillText("Maximum bots reached",r+20,n+116)):(t.fillStyle="#ff4444",t.fillText("Insufficient resources",r+20,n+116))}else t.fillStyle="#666666",t.fillText(`Unlock at ${i.cargoThreshold} total cargo`,r+20,n+80);t.fillStyle="#cccccc",t.font="12px monospace",t.textAlign="center",t.fillText("UP/DOWN or TAB to navigate • ENTER to select • P to close",r+a/2,n+o-10),t.textAlign="left"}static renderBotHUD(t,e,s){if(s.bots.length===0)return;const i=15,a=e.height-60;t.fillStyle="#ff8800",t.font="bold 14px monospace",t.fillText(`Bots: ${s.bots.length}/${s.maxBots}`,i,a),t.fillStyle="#ffaa00",t.font="12px monospace",t.fillText("Defending & Collecting",i,a+18)}}f(M,"uiState",{showUpgradeMenu:!1,showBotMenu:!1,selectedUpgradeTab:"ship",selectedUpgradeIndex:0,selectedBotOption:0});class k{static createTimer(){return{startTime:performance.now()/1e3,endTime:null,isRunning:!0}}static stopTimer(t){t.isRunning&&(t.endTime=performance.now()/1e3,t.isRunning=!1)}static getElapsedTime(t){return t.isRunning?performance.now()/1e3-t.startTime:(t.endTime||t.startTime)-t.startTime}static formatTime(t){const e=Math.floor(t/60),s=Math.floor(t%60);return`${e}:${s.toString().padStart(2,"0")}`}static formatDetailedTime(t){const e=Math.floor(t/3600),s=Math.floor(t%3600/60),i=Math.floor(t%60);return e>0?`${e}h ${s}m ${i}s`:s>0?`${s}m ${i}s`:`${i}s`}}class N{static calculateScore(t){const e=Math.max(0,this.WEIGHTS.TIME_MULTIPLIER-t.playTime*2),s=t.materialsCollected*this.WEIGHTS.MATERIAL_WEIGHT,i=t.asteroidsDestroyed*this.WEIGHTS.ASTEROID_WEIGHT,a=Math.floor(t.enemiesDestroyed*this.WEIGHTS.ENEMY_WEIGHT*this.WEIGHTS.ENEMY_MULTIPLIER),o=t.planetsConquered*this.WEIGHTS.PLANET_WEIGHT,r=t.basesBuilt*this.WEIGHTS.BASE_WEIGHT,n=t.spaceMonsterKills*this.WEIGHTS.MONSTER_BONUS,c=Math.floor(e+s+i+a+o+r+n),l=this.RANK_THRESHOLDS.find(u=>c>=u.min)||this.RANK_THRESHOLDS[this.RANK_THRESHOLDS.length-1];return{timeScore:Math.floor(e),materialScore:s,asteroidScore:i,enemyScore:a,planetScore:o,baseScore:r,monsterBonus:n,totalScore:c,rank:l.rank,rankColor:l.color}}static extractStatsFromGameState(t,e){const s=k.getElapsedTime(e),i=t.finalStats.enemiesDestroyed,a=t.finalStats.spaceMonsterKills,o=t.planets.filter(n=>n.owner==="player"),r=o.reduce((n,c)=>n+c.bases,0);return{playTime:s,materialsCollected:t.ship.cargoMaterials+t.finalStats.totalMaterials,asteroidsDestroyed:35-t.asteroids.length,enemiesDestroyed:i,planetsConquered:o.length,basesBuilt:r,spaceMonsterKills:a}}static getScoreDescription(t){return t>=2e3?"Legendary performance! You are a master of space!":t>=1500?"Outstanding! You command the stars!":t>=1200?"Excellent work, Captain!":t>=900?"Great piloting skills!":t>=600?"Solid mining operation!":t>=300?"Good effort, Cadet!":"Keep practicing, Rookie!"}}f(N,"WEIGHTS",{TIME_MULTIPLIER:1e3,MATERIAL_WEIGHT:2,ASTEROID_WEIGHT:5,ENEMY_WEIGHT:10,ENEMY_MULTIPLIER:1.3,PLANET_WEIGHT:25,BASE_WEIGHT:15,MONSTER_BONUS:100}),f(N,"RANK_THRESHOLDS",[{min:2e3,rank:"COSMIC LEGEND",color:"#ff00ff"},{min:1500,rank:"FLEET ADMIRAL",color:"#ffaa00"},{min:1200,rank:"SPACE CAPTAIN",color:"#00aaff"},{min:900,rank:"STAR PILOT",color:"#00ff00"},{min:600,rank:"ASTEROID MINER",color:"#6699cc"},{min:300,rank:"SPACE CADET",color:"#cccccc"},{min:0,rank:"ROOKIE",color:"#888888"}]);class ot{constructor(t){f(this,"ctx");f(this,"canvas");f(this,"showMinimap",!1);f(this,"currentGameState",null);this.canvas=t,this.ctx=t.getContext("2d")}getCanvas(){return this.canvas}toggleMinimap(){this.showMinimap=!this.showMinimap}isMinimapVisible(){return this.showMinimap}render(t){this.currentGameState=t,this.clearScreen(),t.gameStatus==="playing"?(this.renderAsteroids(t.asteroids,t.camera),this.renderPlanets(t.planets,t.camera),this.renderProjectiles(t.projectiles,t.camera),this.renderResourceDrops(t.resourceDrops,t.camera),this.renderEnemies(t.enemies,t.camera),this.renderParticles(t.particles,t.camera),this.renderShip(t.ship,t.camera),this.renderLightningEffects(t.ship,t.camera),this.renderBots(t.botState.bots,t.camera),this.renderShipLevelIndicator(t.ship,t.upgradeState),this.renderUI(t.ship,t.lives),this.renderBotHUD(t.botState),this.renderUpgradeMenu(t.ship,t.upgradeState),this.renderBotMenu(t.ship,t.botState),this.renderSpaceMonsterWarnings(t.spaceMonsterWarnings),this.renderBoundaryWarning(this.ctx,this.canvas,t.ship),this.showMinimap&&this.renderMinimap(t)):this.renderEndScreen(t)}clearScreen(){this.ctx.fillStyle="#000011",this.ctx.fillRect(0,0,this.canvas.width,this.canvas.height),this.renderStars()}renderStars(){this.ctx.fillStyle="#ffffff";for(let t=0;t<100;t++){const e=t*37%this.canvas.width,s=t*73%this.canvas.height;this.ctx.fillRect(e,s,1,1)}}renderAsteroids(t,e){this.ctx.lineWidth=2;for(const s of t){const i=I.worldToScreen(s.position,e,this.canvas);if(this.isOnScreen(i,s.radius)){const a=s.health/s.maxHealth;a>.66?this.ctx.strokeStyle="#888888":a>.33?this.ctx.strokeStyle="#aa6600":this.ctx.strokeStyle="#cc3300",this.ctx.beginPath();for(let o=0;o<s.vertices.length;o++){const r=s.vertices[o],n={x:s.position.x+r.x,y:s.position.y+r.y},c=I.worldToScreen(n,e,this.canvas);o===0?this.ctx.moveTo(c.x,c.y):this.ctx.lineTo(c.x,c.y)}this.ctx.closePath(),this.ctx.stroke()}}}renderPlanets(t,e){for(const s of t){const i=I.worldToScreen(s.position,e,this.canvas);if(this.isOnScreen(i,s.radius)){if(this.ctx.save(),this.ctx.translate(i.x,i.y),this.ctx.beginPath(),this.ctx.arc(0,0,s.radius,0,Math.PI*2),s.owner==="none"?(this.ctx.fillStyle="#444444",this.ctx.strokeStyle="#666666"):s.owner==="player"?(this.ctx.fillStyle="#004400",this.ctx.strokeStyle="#00aa00"):(this.ctx.fillStyle="#440000",this.ctx.strokeStyle="#aa0000"),this.ctx.fill(),this.ctx.lineWidth=3,this.ctx.stroke(),s.owner!=="none"&&s.currentHP<s.maxHP&&s.currentHP/s.maxHP<.75){this.ctx.strokeStyle="#ff4444",this.ctx.lineWidth=2,this.ctx.beginPath();for(let o=0;o<3;o++){const r=o/3*Math.PI*2,n=s.radius*.3,c=s.radius*.9;this.ctx.moveTo(Math.cos(r)*n,Math.sin(r)*n),this.ctx.lineTo(Math.cos(r)*c,Math.sin(r)*c)}this.ctx.stroke()}if(s.bases>0){const a=s.owner==="player"?"#00ff00":"#ff4444";this.ctx.fillStyle=a,this.ctx.strokeStyle=a;for(let o=0;o<s.bases;o++){const r=o/Math.max(s.bases,1)*Math.PI*2,n=s.radius+15,c=Math.cos(r)*n,l=Math.sin(r)*n;this.ctx.beginPath(),this.ctx.arc(c,l,4,0,Math.PI*2),this.ctx.fill(),this.ctx.beginPath(),this.ctx.moveTo(Math.cos(r)*s.radius,Math.sin(r)*s.radius),this.ctx.lineTo(c,l),this.ctx.lineWidth=1,this.ctx.stroke()}}if(s.owner!=="none"){const a=s.radius*1.5,o=6,r=-s.radius-20;this.ctx.fillStyle="#222222",this.ctx.fillRect(-a/2,r,a,o);const n=s.currentHP/s.maxHP,c=a*n;this.ctx.fillStyle=n>.5?"#00aa00":n>.25?"#aaaa00":"#aa0000",this.ctx.fillRect(-a/2,r,c,o),this.ctx.strokeStyle="#666666",this.ctx.lineWidth=1,this.ctx.strokeRect(-a/2,r,a,o),this.ctx.fillStyle="#ffffff",this.ctx.font="10px monospace",this.ctx.textAlign="center",this.ctx.fillText(`${Math.ceil(s.currentHP)}/${s.maxHP}`,0,r-3),s.bases>0&&this.ctx.fillText(`${s.bases} base${s.bases>1?"s":""}`,0,r+o+12)}this.ctx.restore()}}}renderProjectiles(t,e){for(const s of t){if(!s.active)continue;const i=I.worldToScreen(s.position,e,this.canvas);this.isOnScreen(i,s.radius)&&(s.type==="bomb"?(this.ctx.fillStyle="#ff4400",this.ctx.strokeStyle="#ff8800",this.ctx.lineWidth=2,this.ctx.beginPath(),this.ctx.arc(i.x,i.y,s.radius,0,Math.PI*2),this.ctx.fill(),this.ctx.stroke(),this.ctx.fillStyle="#ffff00",this.ctx.beginPath(),this.ctx.arc(i.x,i.y,s.radius-1,0,Math.PI*2),this.ctx.fill()):(this.ctx.fillStyle="#ffff00",this.ctx.beginPath(),this.ctx.arc(i.x,i.y,s.radius,0,Math.PI*2),this.ctx.fill()))}}renderResourceDrops(t,e){for(const s of t){if(s.collected)continue;const i=I.worldToScreen(s.position,e,this.canvas);this.isOnScreen(i,s.radius)&&(s.type==="rawMaterial"?this.ctx.fillStyle="#6699cc":s.type==="powerGem"&&(this.ctx.fillStyle="#ff8800"),this.ctx.beginPath(),this.ctx.arc(i.x,i.y,s.radius,0,Math.PI*2),this.ctx.fill(),this.ctx.strokeStyle=this.ctx.fillStyle,this.ctx.lineWidth=1,this.ctx.beginPath(),this.ctx.arc(i.x,i.y,s.radius+2,0,Math.PI*2),this.ctx.stroke())}}renderEnemies(t,e){for(const s of t){if(!s.active)continue;const i=I.worldToScreen(s.position,e,this.canvas);if(this.isOnScreen(i,s.radius)){this.ctx.save(),this.ctx.translate(i.x,i.y),this.ctx.rotate(s.rotation),s.enemyType&&s.enemyType!=="normal"?this.renderSpaceMonster(s):(this.ctx.strokeStyle="#ff4444",this.ctx.lineWidth=2,this.ctx.beginPath(),this.ctx.moveTo(0,-s.radius),this.ctx.lineTo(s.radius*.7,0),this.ctx.lineTo(0,s.radius),this.ctx.lineTo(-s.radius*.7,0),this.ctx.closePath(),this.ctx.stroke());const a=s.health/s.maxHealth;a<1&&(this.ctx.fillStyle=a>.5?"#ffaa00":"#ff4444",this.ctx.fillRect(-s.radius*.5,-s.radius-8,s.radius*a,3)),this.ctx.restore()}}}renderSpaceMonster(t){const e=t.enemyType,s=performance.now()/1e3;let i=1,a="#aa0044",o="rgba(170, 0, 68, 0.3)";switch(t.stunEndTime!==void 0&&s<t.stunEndTime?(i=.4+.6*Math.sin(s*6*Math.PI*2),a="#ffff00",o="rgba(255, 255, 0, 0.4)"):t.hatchState==="dormant"?i=.3+.4*Math.sin(t.hatchTime*2*Math.PI*2):t.hatchState==="awakening"&&(i=.5+.5*Math.sin(t.hatchTime*8*Math.PI*2),a="#ff0066",o="rgba(255, 0, 102, 0.4)"),this.ctx.globalAlpha=i,this.ctx.strokeStyle=a,this.ctx.fillStyle=o,this.ctx.lineWidth=3,e){case"spider":this.renderSpider(t.radius);break;case"centipede":this.renderCentipede(t.radius);break;case"beetle":this.renderBeetle(t.radius);break;default:this.renderSpider(t.radius)}this.ctx.globalAlpha=1}renderSpider(t){this.ctx.beginPath(),this.ctx.ellipse(0,0,t*.6,t*.4,0,0,Math.PI*2),this.ctx.fill(),this.ctx.stroke(),this.ctx.lineWidth=2;for(let e=0;e<8;e++){const s=e/8*Math.PI*2,i=t*.8,a=Math.cos(s)*i,o=Math.sin(s)*i;this.ctx.beginPath(),this.ctx.moveTo(Math.cos(s)*t*.5,Math.sin(s)*t*.3),this.ctx.lineTo(a,o),this.ctx.stroke()}}renderCentipede(t){for(let s=0;s<5;s++){const i=(s-2.5)*(t*.3),a=t*(.8-s*.1);this.ctx.beginPath(),this.ctx.arc(0,i,a*.4,0,Math.PI*2),this.ctx.fill(),this.ctx.stroke(),s>0&&(this.ctx.lineWidth=1,this.ctx.beginPath(),this.ctx.moveTo(-a*.4,i),this.ctx.lineTo(-a*.8,i),this.ctx.moveTo(a*.4,i),this.ctx.lineTo(a*.8,i),this.ctx.stroke())}}renderBeetle(t){this.ctx.beginPath(),this.ctx.roundRect(-t*.5,-t*.7,t,t*1.4,t*.2),this.ctx.fill(),this.ctx.stroke(),this.ctx.strokeStyle="#660022",this.ctx.lineWidth=1,this.ctx.beginPath(),this.ctx.moveTo(0,-t*.6),this.ctx.lineTo(0,t*.6),this.ctx.moveTo(-t*.3,-t*.4),this.ctx.lineTo(-t*.3,t*.4),this.ctx.moveTo(t*.3,-t*.4),this.ctx.lineTo(t*.3,t*.4),this.ctx.stroke(),this.ctx.strokeStyle="#aa0044",this.ctx.lineWidth=2;for(let e=0;e<6;e++){const s=e<3?-1:1,i=(e%3-1)*t*.4;this.ctx.beginPath(),this.ctx.moveTo(s*t*.4,i),this.ctx.lineTo(s*t*.8,i),this.ctx.stroke()}}renderShip(t,e){const s=I.worldToScreen(t.position,e,this.canvas);if(this.ctx.save(),this.ctx.translate(s.x,s.y),this.ctx.rotate(t.rotation),t.isInvincible){const i=performance.now()/1e3,o=.3+.7*Math.sin(i*10*Math.PI*2);this.ctx.globalAlpha=o,this.ctx.strokeStyle="#00ffff",this.ctx.lineWidth=4,this.ctx.beginPath(),this.ctx.arc(0,0,t.radius+5,0,Math.PI*2),this.ctx.stroke()}this.ctx.strokeStyle="#00ff00",this.ctx.lineWidth=2,this.ctx.beginPath(),this.ctx.moveTo(0,-t.radius),this.ctx.lineTo(-t.radius*.6,t.radius*.8),this.ctx.lineTo(t.radius*.6,t.radius*.8),this.ctx.closePath(),this.ctx.stroke(),t.energy>0&&(this.ctx.strokeStyle="#ff4400",this.ctx.beginPath(),this.ctx.moveTo(-4,t.radius*.8),this.ctx.lineTo(0,t.radius*1.3),this.ctx.lineTo(4,t.radius*.8),this.ctx.stroke()),this.ctx.restore(),this.ctx.globalAlpha=1}renderBots(t,e){for(const s of t){const i=I.worldToScreen(s.position,e,this.canvas);this.isOnScreen(i,s.radius)&&(this.ctx.save(),this.ctx.translate(i.x,i.y),this.ctx.rotate(s.rotation),this.ctx.strokeStyle=s.type==="mining"?"#6699cc":"#ff8800",this.ctx.fillStyle=s.type==="mining"?"rgba(102, 153, 204, 0.3)":"rgba(255, 136, 0, 0.3)",this.ctx.lineWidth=2,this.ctx.beginPath(),this.ctx.arc(0,0,s.radius,0,Math.PI*2),this.ctx.fill(),this.ctx.stroke(),this.ctx.strokeStyle="#ffffff",this.ctx.lineWidth=1,this.ctx.beginPath(),this.ctx.moveTo(0,-s.radius*.6),this.ctx.lineTo(-s.radius*.4,s.radius*.4),this.ctx.lineTo(s.radius*.4,s.radius*.4),this.ctx.closePath(),this.ctx.stroke(),this.ctx.restore())}}renderParticles(t,e){for(const s of t){const i=I.worldToScreen(s.position,e,this.canvas);if(this.isOnScreen(i,s.size)){const a=s.life/s.maxLife;this.ctx.globalAlpha=a,this.ctx.fillStyle=s.color,this.ctx.beginPath(),this.ctx.arc(i.x,i.y,s.size,0,Math.PI*2),this.ctx.fill(),this.ctx.globalAlpha=1}}}renderUI(t,e){this.renderMeter("Energy",t.energy,t.maxEnergy,15,15,200,18,"#ff8800");const r=t.hullStrength<t.maxHullStrength*.3?"#ff4444":t.hullStrength<t.maxHullStrength*.6?"#ffaa44":"#4488ff";if(this.renderMeter("Hull",t.hullStrength,t.maxHullStrength,15,50,200,18,r),this.currentGameState){const u=k.getElapsedTime(this.currentGameState.gameTimer);this.ctx.fillStyle="#ffaa00",this.ctx.font="bold 16px monospace",this.ctx.fillText(`Time: ${k.formatTime(u)}`,15,15+35*2+5)}this.ctx.fillStyle="#ffffff",this.ctx.font="bold 16px monospace",this.ctx.fillText(`Lives: ${e}`,15,15+35*2+25);const n=t.cargoMaterials+t.cargoGems,c=t.maxCargoMaterials+t.maxCargoGems;this.ctx.fillStyle="#cccccc",this.ctx.font="14px monospace",this.ctx.fillText(`Total Cargo: ${Math.floor(n)}/${c}`,15,15+35*2+45),this.ctx.fillStyle="#6699cc",this.ctx.font="12px monospace";let l=`▪ Materials: ${Math.floor(t.cargoMaterials)}/${t.maxCargoMaterials} (bases cost 20)`;t.hullStrength<t.maxHullStrength&&(l=`▪ Materials: ${Math.floor(t.cargoMaterials)}/${t.maxCargoMaterials} (repairing hull)`),this.ctx.fillText(l,25,15+35*2+63),this.ctx.fillStyle="#ff8800",this.ctx.fillText(`▪ Power Gems: ${Math.floor(t.cargoGems)}/${t.maxCargoGems}`,25,15+35*2+81),this.ctx.fillStyle="#ff4400",this.ctx.font="bold 14px monospace",this.ctx.fillText(`Bombs: ${t.bombs}/${t.maxBombs}`,15,15+35*2+105),t.bombs<t.maxBombs&&t.cargoMaterials>=10?(this.ctx.fillStyle="#ffaa00",this.ctx.font="12px monospace",this.ctx.fillText("Press N to buy bomb (10 materials)",15,15+35*2+123)):t.bombs<t.maxBombs&&(this.ctx.fillStyle="#666666",this.ctx.font="12px monospace",this.ctx.fillText(`Need 10 materials to buy bomb (${t.bombs}/${t.maxBombs})`,15,15+35*2+123)),t.cargoGems>=10?(this.ctx.fillStyle="#00ffff",this.ctx.font="12px monospace",this.ctx.fillText("Press K for Emergency Melee (10 gems)",15,15+35*2+141)):(this.ctx.fillStyle="#666666",this.ctx.font="12px monospace",this.ctx.fillText(`Need 10 gems for Emergency Melee (${t.cargoGems}/10)`,15,15+35*2+141)),this.ctx.fillStyle="#88cc88",this.ctx.font="12px monospace",this.currentGameState&&this.currentGameState.selectedMission?(this.ctx.fillStyle="#ffaa00",this.ctx.font="bold 14px monospace",this.ctx.fillText(`MISSION: ${this.currentGameState.selectedMission.name}`,15,15+35*2+163),this.ctx.fillStyle="#cccccc",this.ctx.font="12px monospace",this.ctx.fillText(`${this.currentGameState.selectedMission.objective}`,15,15+35*2+181),this.ctx.fillStyle="#88cc88",this.ctx.fillText("Press U for upgrades, P for bots",15,15+35*2+203)):this.ctx.fillText("Press U for upgrades, P for bots",15,15+35*2+163)}renderRoleSelection(t,e){this.ctx.fillStyle="rgba(0, 0, 0, 0.9)",this.ctx.fillRect(0,0,this.canvas.width,this.canvas.height);const s=this.canvas.width/2,i=100;this.ctx.fillStyle="#00ff00",this.ctx.font="bold 36px monospace",this.ctx.textAlign="center",this.ctx.fillText("SELECT YOUR ROLE",s,i),this.ctx.fillStyle="#cccccc",this.ctx.font="16px monospace",this.ctx.fillText("Use UP/DOWN arrows to select, ENTER to confirm",s,i+40);for(let a=0;a<t.length;a++){const o=t[a],r=i+100+a*80,n=a===e;n&&(this.ctx.fillStyle="rgba(0, 255, 0, 0.2)",this.ctx.fillRect(50,r-35,this.canvas.width-100,70),this.ctx.strokeStyle="#00ff00",this.ctx.lineWidth=2,this.ctx.strokeRect(50,r-35,this.canvas.width-100,70)),this.ctx.fillStyle=n?"#00ff00":"#ffffff",this.ctx.font="bold 24px monospace",this.ctx.textAlign="left",this.ctx.fillText(o.name,80,r-10),this.ctx.fillStyle=n?"#ccffcc":"#aaaaaa",this.ctx.font="14px monospace",this.ctx.fillText(o.description,80,r+10),this.ctx.fillStyle=n?"#88cc88":"#888888",this.ctx.font="12px monospace";const c=o.stats,l=`Energy: ${c.maxEnergy} | Hull: ${c.maxHullStrength} | Cargo: ${c.maxCargoMaterials+c.maxCargoGems} | Damage: ${c.weaponDamage}x`;this.ctx.fillText(l,80,r+25)}this.ctx.textAlign="left"}renderMissionSelection(t,e){this.ctx.fillStyle="rgba(0, 0, 0, 0.9)",this.ctx.fillRect(0,0,this.canvas.width,this.canvas.height);const s=this.canvas.width/2,i=100;this.ctx.fillStyle="#00ff00",this.ctx.font="bold 36px monospace",this.ctx.textAlign="center",this.ctx.fillText("SELECT YOUR MISSION",s,i),this.ctx.fillStyle="#cccccc",this.ctx.font="16px monospace",this.ctx.fillText("Use UP/DOWN arrows to select, ENTER to confirm, ESC to go back",s,i+40);for(let a=0;a<t.length;a++){const o=t[a],r=i+100+a*120,n=a===e;n&&(this.ctx.fillStyle="rgba(0, 255, 0, 0.2)",this.ctx.fillRect(50,r-45,this.canvas.width-100,110),this.ctx.strokeStyle="#00ff00",this.ctx.lineWidth=2,this.ctx.strokeRect(50,r-45,this.canvas.width-100,110)),this.ctx.fillStyle=n?"#00ff00":"#ffffff",this.ctx.font="bold 24px monospace",this.ctx.textAlign="left",this.ctx.fillText(o.name,80,r-15),this.ctx.fillStyle=n?"#ccffcc":"#aaaaaa",this.ctx.font="14px monospace",this.ctx.fillText(o.description,80,r+5),this.ctx.fillStyle=n?"#88cc88":"#888888",this.ctx.font="bold 12px monospace",this.ctx.fillText(`OBJECTIVE: ${o.objective}`,80,r+25),this.ctx.fillStyle=n?"#ffaa00":"#666666",this.ctx.font="12px monospace";let c="";switch(o.victoryCondition){case"allAsteroidsMined":c="WIN: Destroy all asteroids";break;case"allEnemiesDefeated":c="WIN: Eliminate all threats (bugs & enemies)";break;case"allPlanetsColonized":c="WIN: Control all planets";break}this.ctx.fillText(c,80,r+40)}this.ctx.textAlign="left"}renderDifficultySelection(t,e,s){const i=this.ctx,a=this.canvas;i.fillStyle="#000011",i.fillRect(0,0,a.width,a.height),i.fillStyle="#ff6600",i.font="bold 32px monospace",i.textAlign="center",i.fillText("SELECT DIFFICULTY",a.width/2,80),i.fillStyle="#cccccc",i.font="16px monospace",i.fillText("Choose your challenge level",a.width/2,110);const o=180,r=120;for(let n=0;n<t.length;n++){const c=t[n],l=o+n*r,u=n===e;u&&(i.fillStyle="rgba(255, 102, 0, 0.2)",i.fillRect(50,l-40,a.width-100,100),i.strokeStyle="#ff6600",i.lineWidth=2,i.strokeRect(50,l-40,a.width-100,100)),i.fillStyle=u?"#ff6600":"#ffffff",i.font="bold 24px monospace",i.textAlign="center",i.fillText(`${n+1}. ${c.name}`,a.width/2,l),i.fillStyle="#cccccc",i.font="14px monospace",i.fillText(c.description,a.width/2,l+25),i.fillStyle="#888888",i.font="12px monospace";const d=c.enemySpawnMultiplier<1?`${Math.round((1-c.enemySpawnMultiplier)*100)}% faster spawns`:"Normal spawn rate",y=c.enemyCountMultiplier>1?`${c.enemyCountMultiplier}x enemies per wave`:"Normal enemy count",S=c.cosmicEggMultiplier>1?`${c.cosmicEggMultiplier}x cosmic eggs`:"Normal cosmic eggs";i.fillText(`${d} • ${y} • ${S}`,a.width/2,l+45)}i.fillStyle="#666666",i.font="14px monospace",i.textAlign="center",i.fillText("UP/DOWN or W/S - Navigate • ENTER/SPACE - Select • Q - Quit",a.width/2,a.height-60),i.fillText("ESC - Back to Role Selection",a.width/2,a.height-30)}renderMeter(t,e,s,i,a,o,r,n){this.ctx.fillStyle="#222222",this.ctx.fillRect(i,a,o,r),this.ctx.strokeStyle="#444444",this.ctx.lineWidth=1,this.ctx.strokeRect(i,a,o,r);const c=e/s*o;this.ctx.fillStyle=n,this.ctx.fillRect(i,a,c,r),this.ctx.strokeStyle="#666666",this.ctx.lineWidth=1,this.ctx.strokeRect(i,a,o,r),this.ctx.fillStyle="#ffffff",this.ctx.font="bold 12px monospace",this.ctx.fillText(t,i,a-3),this.ctx.fillStyle="#cccccc",this.ctx.font="11px monospace";const l=`${Math.ceil(e)}/${s}`;this.ctx.fillText(l,i+o+8,a+r-4)}isOnScreen(t,e){return t.x+e>0&&t.x-e<this.canvas.width&&t.y+e>0&&t.y-e<this.canvas.height}renderEndScreen(t){this.ctx.fillStyle="rgba(0, 0, 0, 0.8)",this.ctx.fillRect(0,0,this.canvas.width,this.canvas.height);const e=this.canvas.width/2,s=80;this.ctx.fillStyle=t.gameStatus==="victory"?"#00ff00":"#ff4444",this.ctx.font="bold 48px monospace",this.ctx.textAlign="center";const i=t.gameStatus==="victory"?"VICTORY!":"GAME OVER";this.ctx.fillText(i,e,s),t.currentLevel&&t.currentLevel>1&&(this.ctx.fillStyle="#ffaa00",this.ctx.font="16px monospace",this.ctx.fillText(`Level ${t.currentLevel} Complete!`,this.canvas.width/2,150));const a=N.extractStatsFromGameState(t,t.gameTimer),o=N.calculateScore(a);this.ctx.fillStyle=o.rankColor,this.ctx.font="bold 32px monospace",this.ctx.fillText(`${o.rank}`,e,s+100),this.ctx.fillStyle="#ffffff",this.ctx.font="bold 24px monospace",this.ctx.fillText(`FINAL SCORE: ${o.totalScore}`,e,s+130),this.ctx.fillStyle="#cccccc",this.ctx.font="14px monospace",this.ctx.fillText(N.getScoreDescription(o.totalScore),e,s+150),this.renderScoreVisualization(o,a,e,s+180),this.ctx.font="16px monospace",this.ctx.fillStyle="#cccccc",this.ctx.fillText("MISSION STATISTICS",e,s+380),this.ctx.font="14px monospace",this.ctx.fillStyle="#6699cc",this.ctx.fillText(`Play Time: ${k.formatDetailedTime(a.playTime)}`,e,s+405),this.ctx.fillStyle="#ff8800",this.ctx.fillText(`Materials: ${a.materialsCollected} | Asteroids: ${a.asteroidsDestroyed} | Enemies: ${a.enemiesDestroyed}`,e,s+425),this.ctx.fillStyle="#888888",this.ctx.fillText(`Planets: ${a.planetsConquered} | Bases: ${a.basesBuilt} | Space Monsters: ${a.spaceMonsterKills}`,e,s+445),this.ctx.fillStyle="#00ff00",this.ctx.font="bold 18px monospace",this.ctx.fillText("N - Next Level",e,s+485),this.ctx.fillStyle="#cccccc",this.ctx.font="16px monospace",this.ctx.fillText("R - Restart Game • Q - Quit to Title",e,s+525),this.ctx.textAlign="left"}renderScoreVisualization(t,e,s,i){const o=i+80,r=[{label:"Speed",value:t.timeScore,max:800,color:"#ffaa00"},{label:"Materials",value:t.materialScore,max:200,color:"#6699cc"},{label:"Asteroids",value:t.asteroidScore,max:175,color:"#888888"},{label:"Combat",value:t.enemyScore,max:300,color:"#ff4444"},{label:"Planets",value:t.planetScore,max:100,color:"#00aa00"},{label:"Bases",value:t.baseScore,max:75,color:"#00ffff"}];this.ctx.strokeStyle="#333333",this.ctx.lineWidth=1;for(let n=1;n<=3;n++)this.ctx.beginPath(),this.ctx.arc(s,o,80*n/3,0,Math.PI*2),this.ctx.stroke();this.ctx.strokeStyle="#555555",this.ctx.lineWidth=1;for(let n=0;n<r.length;n++){const c=n/r.length*Math.PI*2-Math.PI/2,l=s+Math.cos(c)*80,u=o+Math.sin(c)*80;this.ctx.beginPath(),this.ctx.moveTo(s,o),this.ctx.lineTo(l,u),this.ctx.stroke()}this.ctx.beginPath(),this.ctx.strokeStyle="#00ff00",this.ctx.fillStyle="rgba(0, 255, 0, 0.2)",this.ctx.lineWidth=2;for(let n=0;n<r.length;n++){const c=r[n],l=n/r.length*Math.PI*2-Math.PI/2,d=80*Math.min(c.value/c.max,1),y=s+Math.cos(l)*d,S=o+Math.sin(l)*d;n===0?this.ctx.moveTo(y,S):this.ctx.lineTo(y,S)}this.ctx.closePath(),this.ctx.fill(),this.ctx.stroke(),this.ctx.font="12px monospace",this.ctx.textAlign="center";for(let n=0;n<r.length;n++){const c=r[n],l=n/r.length*Math.PI*2-Math.PI/2,u=105,d=s+Math.cos(l)*u,y=o+Math.sin(l)*u;this.ctx.fillStyle=c.color,this.ctx.fillText(c.label,d,y),this.ctx.fillStyle="#cccccc",this.ctx.fillText(`${c.value}`,d,y+14)}t.monsterBonus>0&&(this.ctx.fillStyle="#ff00ff",this.ctx.font="bold 14px monospace",this.ctx.textAlign="center",this.ctx.fillText(`MONSTER BONUS: +${t.monsterBonus}`,s,o+80+60)),this.ctx.textAlign="left"}renderShipLevelIndicator(t,e){const s=e.shipUpgrades,i=s.energyCapacity+s.energyRecharge+s.hullStrength+s.cargoCapacity+s.weaponDamage+s.weaponFireRate,a=e.baseUpgrades,o=a.hpBonus+a.regenBonus,r=i+o,n=Math.floor(r/3)+1,c=this.canvas.width/2,l=35;this.ctx.save(),this.ctx.translate(c,l);const u=35;let d="#666666",y="#333333";n>=10&&(d="#ff00ff"),n>=10?y="#ff00ff44":n>=7?(d="#ffaa00",y="#ffaa0044"):n>=4?(d="#00aaff",y="#00aaff44"):n>=2&&(d="#00ff00",y="#00ff0044"),n>=2&&(this.ctx.fillStyle=y,this.ctx.beginPath(),this.ctx.arc(0,0,u,0,Math.PI*2),this.ctx.fill()),this.ctx.strokeStyle="#888888",this.ctx.lineWidth=3,this.ctx.beginPath(),this.ctx.arc(0,0,28,0,Math.PI*2),this.ctx.stroke(),this.ctx.fillStyle=d,this.ctx.beginPath(),this.ctx.arc(0,0,25,0,Math.PI*2),this.ctx.fill(),this.ctx.fillStyle="rgba(255, 255, 255, 0.3)",this.ctx.beginPath(),this.ctx.arc(-5,-5,15,0,Math.PI*2),this.ctx.fill(),this.ctx.strokeStyle="#ffffff",this.ctx.lineWidth=2,this.ctx.beginPath(),this.ctx.arc(0,0,25,0,Math.PI*2),this.ctx.stroke(),this.ctx.fillStyle="#ffffff",this.ctx.strokeStyle="#000000",this.ctx.lineWidth=1,this.ctx.beginPath(),this.ctx.moveTo(0,-12),this.ctx.lineTo(-8,8),this.ctx.lineTo(8,8),this.ctx.closePath(),this.ctx.fill(),this.ctx.stroke(),this.ctx.fillStyle="#ff4400",this.ctx.beginPath(),this.ctx.moveTo(-4,8),this.ctx.lineTo(-2,12),this.ctx.lineTo(2,12),this.ctx.lineTo(4,8),this.ctx.closePath(),this.ctx.fill(),this.ctx.fillStyle="#000000",this.ctx.font="bold 10px monospace",this.ctx.textAlign="center",this.ctx.fillText(n.toString(),0,3),this.ctx.restore(),this.ctx.fillStyle="#000000",this.ctx.font="bold 16px monospace",this.ctx.textAlign="center",this.ctx.fillText(`SHIP LEVEL ${n}`,c+1,l+45),this.ctx.fillStyle="#ffffff",this.ctx.font="bold 16px monospace",this.ctx.textAlign="center",this.ctx.fillText(`SHIP LEVEL ${n}`,c,l+44),this.ctx.fillStyle=d,this.ctx.font="12px monospace",this.ctx.fillText(`${r} Total Upgrades`,c,l+60);const S=n*3-r;S>0?(this.ctx.fillStyle="#999999",this.ctx.font="10px monospace",this.ctx.fillText(`${S} more upgrades to level ${n+1}`,c,l+75)):(this.ctx.fillStyle="#ffaa00",this.ctx.font="10px monospace",this.ctx.fillText("MAXIMUM POWER ACHIEVED!",c,l+75));let p="";n>=10?p="FLEET ADMIRAL":n>=7?p="CAPTAIN":n>=4?p="LIEUTENANT":n>=2?p="PILOT":p="RECRUIT",p&&(this.ctx.fillStyle=d,this.ctx.font="bold 11px monospace",this.ctx.fillText(p,c,l+90)),this.ctx.textAlign="left"}renderMinimap(t){const s=this.canvas.width-200-20,i=20,a=t.worldConfig;this.ctx.fillStyle="rgba(0, 0, 0, 0.8)",this.ctx.fillRect(s,i,200,200),this.ctx.strokeStyle="#666666",this.ctx.lineWidth=2,this.ctx.strokeRect(s,i,200,200),this.ctx.fillStyle="#ffffff",this.ctx.font="bold 12px monospace",this.ctx.textAlign="center",this.ctx.fillText("MAP (M to toggle)",s+200/2,i-5),this.ctx.strokeStyle="#444444",this.ctx.lineWidth=1,this.ctx.strokeRect(s+10,i+10,180,180);const o=180/a.worldWidth,r=180/a.worldHeight,n=l=>({x:s+10+(l.x+a.worldWidth/2)*o,y:i+10+(l.y+a.worldHeight/2)*r});this.ctx.fillStyle="#888888";for(const l of t.asteroids){const u=n(l.position);this.ctx.beginPath(),this.ctx.arc(u.x,u.y,2,0,Math.PI*2),this.ctx.fill()}for(const l of t.planets){const u=n(l.position);if(l.owner==="none"?this.ctx.fillStyle="#666666":l.owner==="player"?this.ctx.fillStyle="#00aa00":this.ctx.fillStyle="#aa0000",l.owner==="player")for(const d of l.planetBots){if(!d.active)continue;const y=I.worldToScreen(d.position,t.camera,this.canvas);this.isOnScreen(y,d.radius)&&(this.ctx.save(),this.ctx.translate(y.x,y.y),this.ctx.rotate(d.rotation),this.ctx.strokeStyle="#4488cc",this.ctx.fillStyle="rgba(68, 136, 204, 0.3)",this.ctx.lineWidth=1,this.ctx.beginPath(),this.ctx.arc(0,0,d.radius,0,Math.PI*2),this.ctx.fill(),this.ctx.stroke(),this.ctx.strokeStyle="#ffffff",this.ctx.lineWidth=1,this.ctx.beginPath(),this.ctx.moveTo(0,-d.radius*.5),this.ctx.lineTo(-d.radius*.3,d.radius*.3),this.ctx.lineTo(d.radius*.3,d.radius*.3),this.ctx.closePath(),this.ctx.stroke(),this.ctx.restore())}this.ctx.beginPath(),this.ctx.arc(u.x,u.y,5,0,Math.PI*2),this.ctx.fill(),l.bases>0&&(this.ctx.fillStyle="#ffffff",this.ctx.font="8px monospace",this.ctx.textAlign="center",this.ctx.fillText(l.bases.toString(),u.x,u.y+2))}this.ctx.fillStyle="#ff4444";for(const l of t.enemies){if(!l.active)continue;const u=n(l.position);this.ctx.beginPath(),this.ctx.arc(u.x,u.y,3,0,Math.PI*2),this.ctx.fill()}for(const l of t.resourceDrops){if(l.collected)continue;const u=n(l.position);this.ctx.fillStyle=l.type==="rawMaterial"?"#6699cc":"#ff8800",this.ctx.beginPath(),this.ctx.arc(u.x,u.y,1.5,0,Math.PI*2),this.ctx.fill()}const c=n(t.ship.position);this.ctx.save(),this.ctx.translate(c.x,c.y),this.ctx.rotate(t.ship.rotation),this.ctx.fillStyle="#00ff00",this.ctx.beginPath(),this.ctx.moveTo(0,-4),this.ctx.lineTo(-3,3),this.ctx.lineTo(3,3),this.ctx.closePath(),this.ctx.fill(),this.ctx.restore(),this.ctx.textAlign="left"}renderUpgradeMenu(t,e){M.renderUpgradeMenu(this.ctx,this.canvas,t,e)}renderBotMenu(t,e){M.renderBotMenu(this.ctx,this.canvas,t,e)}renderBotHUD(t){M.renderBotHUD(this.ctx,this.canvas,t)}renderSpaceMonsterWarnings(t){const e=performance.now()/1e3;for(const s of t){const i=e-s.startTime;if(i>=s.duration)continue;const a=this.canvas.width-80,o=this.canvas.height-80,r=Math.max(0,(s.duration-i)/s.duration)*8,n=(Math.random()-.5)*r,c=(Math.random()-.5)*r;this.ctx.save(),this.ctx.translate(a+n,o+c),this.ctx.fillStyle="#ffff00",this.ctx.strokeStyle="#ff8800",this.ctx.lineWidth=3,this.ctx.beginPath(),this.ctx.moveTo(0,-25),this.ctx.lineTo(-22,20),this.ctx.lineTo(22,20),this.ctx.closePath(),this.ctx.fill(),this.ctx.stroke(),this.ctx.fillStyle="#000000",this.ctx.font="bold 24px monospace",this.ctx.textAlign="center",this.ctx.fillText("!",0,5),this.ctx.fillStyle="#ffff00",this.ctx.font="bold 12px monospace",this.ctx.fillText("SPACE MONSTER",0,40),this.ctx.fillText("DETECTED",0,55),this.ctx.restore()}}renderLightningEffects(t,e){if(!t.meleeCharging)return;const s=performance.now()/1e3,i=I.worldToScreen(t.position,e,this.canvas);this.ctx.save(),this.ctx.translate(i.x,i.y);const a=3,o=400;for(let n=0;n<a;n++){const c=(s*4+n*.5)%2,l=c/2*o,u=1-c/2;this.ctx.globalAlpha=u*.6,this.ctx.strokeStyle="#00ffff",this.ctx.lineWidth=3,this.ctx.beginPath(),this.ctx.arc(0,0,l,0,Math.PI*2),this.ctx.stroke()}const r=8;this.ctx.globalAlpha=.8,this.ctx.strokeStyle="#ffffff",this.ctx.lineWidth=2;for(let n=0;n<r;n++){const c=n/r*Math.PI*2,l=60+Math.sin(s*8+n)*20;this.ctx.beginPath(),this.ctx.moveTo(0,0);const u=4;for(let d=1;d<=u;d++){const y=d/u,S=Math.cos(c)*l*y,p=Math.sin(c)*l*y,h=(Math.random()-.5)*15,g=(Math.random()-.5)*15;this.ctx.lineTo(S+h,p+g)}this.ctx.stroke()}if(this.ctx.restore(),this.ctx.globalAlpha=1,t.meleeCharging){const n=this.canvas.width-80,c=this.canvas.height-80,l=12,u=(Math.random()-.5)*l,d=(Math.random()-.5)*l;this.ctx.save(),this.ctx.translate(n+u,c+d),this.ctx.fillStyle="#00ffff",this.ctx.strokeStyle="#0088ff",this.ctx.lineWidth=3,this.ctx.beginPath(),this.ctx.moveTo(0,-25),this.ctx.lineTo(-22,20),this.ctx.lineTo(22,20),this.ctx.closePath(),this.ctx.fill(),this.ctx.stroke(),this.ctx.fillStyle="#000000",this.ctx.strokeStyle="#000000",this.ctx.lineWidth=2,this.ctx.beginPath(),this.ctx.moveTo(-5,-15),this.ctx.lineTo(5,-5),this.ctx.lineTo(-2,-5),this.ctx.lineTo(5,10),this.ctx.lineTo(-5,0),this.ctx.lineTo(2,0),this.ctx.closePath(),this.ctx.fill(),this.ctx.fillStyle="#00ffff",this.ctx.font="bold 12px monospace",this.ctx.textAlign="center",this.ctx.fillText("LIGHTNING",0,40),this.ctx.fillText("CHARGING",0,55),this.ctx.restore()}}renderBoundaryWarning(t,e,s){if(!s.isOutOfBounds)return;const i=25,a=e.width-i-15,o=e.height-i-80;t.fillStyle="rgba(255, 0, 0, 0.8)",t.beginPath(),t.moveTo(a+i/2,o),t.lineTo(a,o+i),t.lineTo(a+i,o+i),t.closePath(),t.fill(),t.strokeStyle="#ff0000",t.lineWidth=2,t.stroke(),t.fillStyle="#ffffff",t.font="bold 14px monospace",t.textAlign="center",t.fillText("N - Next Level | R - Restart Game | Q - Quit to Title",e.width/2,e.height-40),t.fillStyle="#ff0000",t.font="bold 12px monospace",t.textAlign="left",t.fillText("OUT OF BOUNDS",a-85,o+15)}renderQuitConfirmation(){this.ctx.fillStyle="rgba(0, 0, 0, 0.8)",this.ctx.fillRect(0,0,this.canvas.width,this.canvas.height);const t=this.canvas.width/2,e=this.canvas.height/2;this.ctx.fillStyle="#ff4444",this.ctx.font="bold 36px monospace",this.ctx.textAlign="center",this.ctx.fillText("QUIT TO TITLE?",t,e-40),this.ctx.fillStyle="#ffffff",this.ctx.font="20px monospace",this.ctx.fillText("Press Q again to confirm",t,e+20),this.ctx.fillText("Press ESC to cancel",t,e+50),this.ctx.textAlign="left"}worldToScreen(t,e,s){return I.worldToScreen(t,e,s)}}class nt{constructor(t){f(this,"keys",new Set);f(this,"keysPressed",new Set);f(this,"keysReleased",new Set);f(this,"mousePressed",!1);f(this,"mousePosition",{x:0,y:0});f(this,"canvas");this.canvas=t,this.setupEventListeners()}setupEventListeners(){this.canvas.tabIndex=0,this.canvas.focus(),this.canvas.addEventListener("keydown",t=>{this.keys.has(t.code)||this.keysPressed.add(t.code),this.keys.add(t.code),t.preventDefault()}),this.canvas.addEventListener("keyup",t=>{this.keysReleased.add(t.code),this.keys.delete(t.code),t.preventDefault()}),this.canvas.addEventListener("mousedown",t=>{t.button===0&&(this.mousePressed=!0,t.preventDefault())}),this.canvas.addEventListener("mouseup",t=>{t.button===0&&(this.mousePressed=!1,t.preventDefault())}),this.canvas.addEventListener("contextmenu",t=>{t.preventDefault()}),this.canvas.addEventListener("mousemove",t=>{const e=this.canvas.getBoundingClientRect();this.mousePosition.x=t.clientX-e.left,this.mousePosition.y=t.clientY-e.top}),this.canvas.addEventListener("blur",()=>{this.canvas.focus()})}getShipInput(){return{thrust:this.keys.has("ArrowUp")||this.keys.has("KeyW"),rotateLeft:this.keys.has("ArrowLeft")||this.keys.has("KeyA"),rotateRight:this.keys.has("ArrowRight")||this.keys.has("KeyD"),fire:this.keys.has("Space")||this.mousePressed,bomb:this.keys.has("KeyB"),buyBomb:this.keys.has("KeyN"),emergencyMelee:this.keys.has("KeyK"),reverse:this.keys.has("ArrowDown")||this.keys.has("KeyS")}}isKeyPressed(t){return this.keys.has(t)}wasKeyJustPressed(t){return this.keysPressed.has(t)}wasKeyJustReleased(t){return this.keysReleased.has(t)}clearFrameInput(){this.keysPressed.clear(),this.keysReleased.clear()}getMousePosition(){return{...this.mousePosition}}}class ${static createProjectile(t){const e=t.radius+5,s={x:Math.sin(t.rotation),y:-Math.cos(t.rotation)};return{id:Math.random().toString(36).substr(2,9),position:{x:t.position.x+s.x*e,y:t.position.y+s.y*e},velocity:{x:s.x*300+t.velocity.x*.5,y:s.y*300+t.velocity.y*.5},radius:2,active:!0,damage:t.weaponDamage,type:"normal"}}static updateProjectiles(t,e,s){for(const i of t){if(!i.active)continue;i.position.x+=i.velocity.x*e,i.position.y+=i.velocity.y*e;const a=s.worldWidth/2,o=s.worldHeight/2;(i.position.x<-a||i.position.x>a||i.position.y<-o||i.position.y>o)&&(i.active=!1)}}static removeInactiveProjectiles(t){return t.filter(e=>e.active)}static createBomb(t,e){const s=t.radius+8,i={x:Math.sin(t.rotation),y:-Math.cos(t.rotation)};let a=null,o=1/0;for(const r of e){if(!r.active)continue;const n=m.distance(t.position,r.position);n<o&&(o=n,a=r)}return{id:m.generateId(),position:{x:t.position.x+i.x*s,y:t.position.y+i.y*s},velocity:{x:i.x*200+t.velocity.x*.3,y:i.y*200+t.velocity.y*.3},radius:4,active:!0,damage:5,type:"bomb",targetId:a==null?void 0:a.id,seekingSpeed:400}}static updateBombs(t,e,s){for(const i of t)if(!(!i.active||i.type!=="bomb")&&i.targetId&&i.seekingSpeed){const a=e.find(o=>o.id===i.targetId&&o.active);if(a){const o={x:a.position.x-i.position.x,y:a.position.y-i.position.y},r=m.normalize(o);i.velocity.x=r.x*i.seekingSpeed,i.velocity.y=r.y*i.seekingSpeed}else i.targetId=void 0}}static createMeleeLightning(t,e){const s=[],i=[];for(const a of e){if(!a.active)continue;m.distance(t.position,a.position)<=this.MELEE_RANGE&&(s.push(a),i.push({id:m.generateId(),startPos:{...t.position},endPos:{...a.position},duration:.3,startTime:performance.now()/1e3}))}return console.log(`Melee lightning strikes ${s.length} enemies!`),{targets:s,lightningBolts:i}}static damageMeleeTargets(t,e){const s=[];for(const i of t)i.health-=e,i.health<=0&&(i.active=!1,s.push(i));return s}}f($,"MELEE_RANGE",400);class j{static checkProjectileAsteroidCollisions(t,e){const s=[];for(const i of t)if(i.active){for(const a of e)if(m.distance(i.position,a.position)<i.radius+a.radius){s.push({asteroid:a,projectile:i}),i.active=!1;break}}return s}static damageAsteroid(t,e=1){return t.health-=e,t.health<=0}static createResourceDrops(t){const e=[],s=(t.radius-15)/25,i=2+Math.floor(s*4),a=4+Math.floor(s*4),o=Math.floor(Math.random()*(a-i+1))+i;for(let r=0;r<o;r++)e.push({id:Math.random().toString(36).substr(2,9),position:{x:t.position.x+(Math.random()-.5)*40,y:t.position.y+(Math.random()-.5)*40},type:"rawMaterial",radius:6,collected:!1,velocity:{x:(Math.random()-.5)*80,y:(Math.random()-.5)*80}});return t.dropsPowerGem&&e.push({id:Math.random().toString(36).substr(2,9),position:{x:t.position.x+(Math.random()-.5)*20,y:t.position.y+(Math.random()-.5)*20},type:"powerGem",radius:8,collected:!1,velocity:{x:(Math.random()-.5)*70,y:(Math.random()-.5)*70}}),e}static removeDestroyedAsteroids(t){return t.filter(e=>e.health>0)}}class W{static checkResourceCollection(t,e){const s=[];for(const i of e){if(i.collected)continue;m.distance(t.position,i.position)<t.radius+i.radius&&E.addResource(t,i.type)&&(i.collected=!0,s.push(i))}return s}static removeCollectedResources(t){return t.filter(e=>!e.collected)}static updateResourceDrops(t,e){for(const s of t)s.collected||(s.position.x+=s.velocity.x*e,s.position.y+=s.velocity.y*e,s.velocity.x*=.98,s.velocity.y*=.98)}static updateResourceAttraction(t,e,s){for(const i of t){if(i.collected)continue;const a=m.distance(i.position,e.position);if(a<=this.ATTRACTION_RADIUS&&a>0){const o={x:e.position.x-i.position.x,y:e.position.y-i.position.y},r=m.normalize(o),n=this.ATTRACTION_FORCE*(1-a/this.ATTRACTION_RADIUS);i.velocity.x+=r.x*n*s,i.velocity.y+=r.y*n*s}}}}f(W,"ATTRACTION_RADIUS",80),f(W,"ATTRACTION_FORCE",150);class B{static createEnemy(t){const e=Math.random()*Math.PI*2,s=this.ENEMY_SPAWN_DISTANCE+Math.random()*200;return{id:m.generateId(),position:{x:t.x+Math.cos(e)*s,y:t.y+Math.sin(e)*s},velocity:{x:0,y:0},rotation:0,radius:15,health:3,maxHealth:3,lastFireTime:0,active:!0,spawnTime:performance.now()/1e3,aiState:"hunting",targetPlanetId:void 0,lastNearPlayerTime:performance.now()/1e3}}static shouldSpawnEnemy(t,e,s){return t-e>=s}static updateEnemies(t,e,s,i){const a=[],o=[],r=performance.now()/1e3;for(const n of t){if(!n.active)continue;const c=m.distance(n.position,e.position),l=r-n.spawnTime;c<=i.enemyDespawnDistance&&(n.lastNearPlayerTime=r);const u=r-(n.lastNearPlayerTime||n.spawnTime);if(l>i.enemyLifetime&&u>i.enemyDespawnTime&&c>i.enemyDespawnDistance*1.5){n.active=!1,o.push(n),console.log(`Enemy despawned after ${Math.round(l)}s total age and ${Math.round(u)}s away from player`);continue}const y={x:e.position.x-n.position.x,y:e.position.y-n.position.y},S=m.normalize(y);n.velocity.x=S.x*this.ENEMY_SPEED,n.velocity.y=S.y*this.ENEMY_SPEED;const p=Math.atan2(y.x,-y.y);let g=p-n.rotation;for(;g>Math.PI;)g-=2*Math.PI;for(;g<-Math.PI;)g+=2*Math.PI;const T=this.ENEMY_ROTATION_SPEED*s;Math.abs(g)<T?n.rotation=p:n.rotation+=Math.sign(g)*T,n.position.x+=n.velocity.x*s,n.position.y+=n.velocity.y*s,c<this.ENEMY_FIRE_RANGE&&r-n.lastFireTime>=this.ENEMY_FIRE_RATE&&(a.push(n),n.lastFireTime=r)}return{shouldFire:a,toRemove:o}}static damageEnemy(t,e){return t.health-=e,t.health<=0}static removeInactiveEnemies(t){return t.filter(e=>e.active)}}f(B,"ENEMY_SPEED",80),f(B,"ENEMY_ROTATION_SPEED",2),f(B,"ENEMY_FIRE_RATE",2),f(B,"ENEMY_FIRE_RANGE",200),f(B,"ENEMY_SPAWN_DISTANCE",400);class U{static checkProjectileEnemyCollisions(t,e){const s=[];for(const i of t)if(i.active)for(const a of e){if(!a.active)continue;if(m.distance(i.position,a.position)<i.radius+a.radius){s.push({enemy:a,projectile:i}),i.active=!1;break}}return s}static createEnemyProjectile(t){const e=t.radius+5,s={x:Math.sin(t.rotation),y:-Math.cos(t.rotation)};return{id:m.generateId(),position:{x:t.position.x+s.x*e,y:t.position.y+s.y*e},velocity:{x:s.x*250,y:s.y*250},radius:2,active:!0,damage:.5}}static createEnemyDrops(t){const e=[];if(t.isResourceCarrier){console.log("💰 Resource-carrying enemy defeated! Dropping substantial resources...");const a=Math.floor(Math.random()*11)+15,o=Math.floor(Math.random()*6)+5;for(let r=0;r<a;r++)e.push({id:m.generateId(),position:{x:t.position.x+(Math.random()-.5)*80,y:t.position.y+(Math.random()-.5)*80},type:"rawMaterial",radius:6,collected:!1,velocity:{x:(Math.random()-.5)*120,y:(Math.random()-.5)*120}});for(let r=0;r<o;r++)e.push({id:m.generateId(),position:{x:t.position.x+(Math.random()-.5)*60,y:t.position.y+(Math.random()-.5)*60},type:"powerGem",radius:8,collected:!1,velocity:{x:(Math.random()-.5)*100,y:(Math.random()-.5)*100}});return e}if(!this.firstEnemyKilled){this.firstEnemyKilled=!0,console.log("First enemy killed - dropping 50 materials and 20 gems for testing!");for(let a=0;a<50;a++)e.push({id:m.generateId(),position:{x:t.position.x+(Math.random()-.5)*100,y:t.position.y+(Math.random()-.5)*100},type:"rawMaterial",radius:6,collected:!1,velocity:{x:(Math.random()-.5)*150,y:(Math.random()-.5)*150}});for(let a=0;a<20;a++)e.push({id:m.generateId(),position:{x:t.position.x+(Math.random()-.5)*80,y:t.position.y+(Math.random()-.5)*80},type:"powerGem",radius:8,collected:!1,velocity:{x:(Math.random()-.5)*120,y:(Math.random()-.5)*120}});return e}const i=Math.floor(Math.random()*3)+1;for(let a=0;a<i;a++){const o=Math.random()<.7?"rawMaterial":"powerGem";e.push({id:m.generateId(),position:{x:t.position.x+(Math.random()-.5)*30,y:t.position.y+(Math.random()-.5)*30},type:o,radius:o==="rawMaterial"?6:8,collected:!1,velocity:{x:(Math.random()-.5)*100,y:(Math.random()-.5)*100}})}return e}}f(U,"firstEnemyKilled",!1);class P{static generatePlanets(t,e){const s=[],i=t.planetCount*20;for(let a=0;a<i&&s.length<t.planetCount;a++){const o={x:m.randomBetween(-t.worldWidth/2,t.worldWidth/2),y:m.randomBetween(-t.worldHeight/2,t.worldHeight/2)};if(m.distance(o,{x:0,y:0})<200)continue;const r=s.some(c=>m.distance(o,c.position)<t.planetMinSpacing),n=e.some(c=>m.distance(o,c.position)<t.planetMinSpacing);if(!r&&!n){const c=m.randomBetween(t.planetSizeMin,t.planetSizeMax);s.push(this.createPlanet(o,c))}}return console.log(`Generated ${s.length} planets`),s}static createPlanet(t,e){return{id:m.generateId(),position:t,radius:e,baseHP:this.BASE_HP,currentHP:this.BASE_HP,maxHP:this.BASE_HP,owner:"none",bases:0,lastRegenTime:performance.now()/1e3,regenRate:this.REGEN_RATE,claimRadius:e*this.CLAIM_RADIUS_RATIO,materialsMined:0,planetBots:[]}}static checkPlanetClaiming(t,e){for(const s of e){if(s.owner!=="none")continue;if(m.distance(t.position,s.position)<=s.claimRadius)return s}return null}static checkEnemyPlanetClaiming(t,e){for(const s of e){if(s.owner!=="none")continue;if(m.distance(t.position,s.position)<=s.claimRadius)return s}return null}static checkBaseExpansion(t,e){for(const s of e){if(s.owner!=="player"||s.bases>=5)continue;if(m.distance(t.position,s.position)<=s.claimRadius)return s}return null}static checkEnemyBaseExpansion(t,e){for(const s of e){if(s.owner!=="enemy"||s.bases>=5)continue;if(m.distance(t.position,s.position)<=s.claimRadius)return s}return null}static claimPlanet(t,e){return t.owner!=="none"?!1:(t.owner=e,t.bases=1,t.maxHP=this.BASE_HP+this.HP_PER_BASE,t.currentHP=t.maxHP,console.log(`Planet claimed by ${e}! HP: ${t.currentHP}/${t.maxHP}`),!0)}static addBase(t,e){return t.owner!==e||t.bases>=5?!1:(t.bases++,t.maxHP=this.BASE_HP+t.bases*this.HP_PER_BASE,t.currentHP=t.maxHP,console.log(`Base added to planet! Bases: ${t.bases}, HP: ${t.currentHP}/${t.maxHP}`),!0)}static damagePlanet(t,e){if(t.currentHP=Math.max(0,t.currentHP-e),console.log(`Planet damaged for ${e} HP! Current: ${Math.ceil(t.currentHP)}/${t.maxHP}, Owner: ${t.owner}, Bases: ${t.bases}`),t.currentHP<=0){const s=t.owner!=="none";return t.owner="none",t.bases=0,t.maxHP=this.BASE_HP,t.currentHP=this.BASE_HP,s&&console.log(`Planet base destroyed! Planet is now unclaimed and restored to ${this.BASE_HP} HP.`),t.planetBots=[],t.materialsMined=0,!0}return!1}static updatePlanetRegen(t,e){const s=performance.now()/1e3;for(const i of t)if(i.owner!=="none"&&i.currentHP<i.maxHP){const a=s-i.lastRegenTime;if(a>=1){const o=i.regenRate*Math.floor(a);i.currentHP=Math.min(i.maxHP,i.currentHP+o),i.lastRegenTime=s}}}static getPlayerPlanets(t){return t.filter(e=>e.owner==="player")}static getEnemyPlanets(t){return t.filter(e=>e.owner==="enemy")}static getUnclaimedPlanets(t){return t.filter(e=>e.owner==="none")}static canPlayerAffordBase(t,e){return t.cargoMaterials>=e}static consumeBaseCost(t,e){return t.cargoMaterials>=e?(t.cargoMaterials-=e,!0):!1}static updatePlanetBotGeneration(t,e){for(const s of t){if(s.owner!=="player")continue;const i=s.bases*.5;s.materialsMined+=i*e;const a=Math.floor(s.materialsMined/10),o=s.bases*3,r=s.planetBots.filter(n=>n.active).length;a>r&&r<o&&(this.spawnPlanetBot(s,r),console.log(`Planet spawned defense bot! Total bots: ${r+1}/${o}`))}}static spawnPlanetBot(t,e){const s=Math.floor(e/3),i=e%3,a=t.radius+25+s*15,o=s/Math.max(t.bases,1)*Math.PI*2,r=i/3*(Math.PI*2/3),n={id:m.generateId(),position:{...t.position},rotation:0,radius:6,orbitAngle:o+r,orbitRadius:a,baseIndex:s,botIndex:i,lastFireTime:0,fireRate:.4,range:150,active:!0};t.planetBots.push(n)}static updatePlanetBots(t,e,s){const i=[],a=performance.now()/1e3;for(const o of t)if(o.owner==="player")for(const r of o.planetBots){if(!r.active)continue;r.orbitAngle+=s*.3,r.position.x=o.position.x+Math.cos(r.orbitAngle)*r.orbitRadius,r.position.y=o.position.y+Math.sin(r.orbitAngle)*r.orbitRadius;const n=this.findNearestEnemyToPlanet(r.position,e,r.range);if(n&&a-r.lastFireTime>=r.fireRate){const c={x:n.position.x-r.position.x,y:n.position.y-r.position.y};r.rotation=Math.atan2(c.x,-c.y);const l=this.createPlanetBotProjectile(r);i.push(l),r.lastFireTime=a}}return i}static findNearestEnemyToPlanet(t,e,s){let i=null,a=s;for(const o of e){if(!o.active)continue;const r=m.distance(t,o.position);r<a&&(i=o,a=r)}return i}static createPlanetBotProjectile(t){const e=t.radius+3,s={x:Math.sin(t.rotation),y:-Math.cos(t.rotation)};return{id:m.generateId(),position:{x:t.position.x+s.x*e,y:t.position.y+s.y*e},velocity:{x:s.x*200,y:s.y*200},radius:1.5,active:!0,damage:.8,type:"normal"}}}f(P,"BASE_HP",100),f(P,"HP_PER_BASE",25),f(P,"REGEN_RATE",5),f(P,"CLAIM_RADIUS_RATIO",.6);class X{static async saveScore(t){try{const e=this.generateId(),s=Date.now(),i={...t,id:e,timestamp:s},a=await this.getLeaderboard();a.push(i),a.sort((r,n)=>n.score-r.score);const o=a.slice(0,this.MAX_ENTRIES);return localStorage.setItem(this.STORAGE_KEY,JSON.stringify(o)),console.log(`Score saved! Rank #${o.findIndex(r=>r.id===e)+1} with ${t.score} points`),!0}catch(e){return console.error("Failed to save score:",e),!1}}static async getLeaderboard(){try{const t=localStorage.getItem(this.STORAGE_KEY);return t?JSON.parse(t).sort((s,i)=>i.score-s.score):[]}catch(t){return console.error("Failed to load leaderboard:",t),[]}}static async getTopScores(t=10){return(await this.getLeaderboard()).slice(0,t)}static async getPlayerRank(t){return(await this.getLeaderboard()).filter(i=>i.score>t).length+1}static async getScoreStats(){var n;const t=await this.getLeaderboard();if(t.length===0)return{totalEntries:0,highestScore:0,averageScore:0,mostPopularMission:"None",mostPopularRole:"None"};const e=t.reduce((c,l)=>c+l.score,0),s=Math.floor(e/t.length),i={},a={};t.forEach(c=>{i[c.mission]=(i[c.mission]||0)+1,a[c.shipRole]=(a[c.shipRole]||0)+1});const o=Object.keys(i).reduce((c,l)=>i[c]>i[l]?c:l,Object.keys(i)[0]||"None"),r=Object.keys(a).reduce((c,l)=>a[c]>a[l]?c:l,Object.keys(a)[0]||"None");return{totalEntries:t.length,highestScore:((n=t[0])==null?void 0:n.score)||0,averageScore:s,mostPopularMission:o,mostPopularRole:r}}static generateId(){return Date.now().toString(36)+Math.random().toString(36).substr(2)}static async saveToAPI(t){return!1}static async loadFromAPI(){return[]}}f(X,"MAX_ENTRIES",100),f(X,"STORAGE_KEY","space-mining-leaderboard");class V{static checkShipDestruction(t){t.ship.hullStrength<=0&&(t.lives--,t.lives>0?(t.ship.hullStrength=t.ship.maxHullStrength,t.ship.energy=t.ship.maxEnergy,t.ship.position={x:0,y:0},t.ship.velocity={x:0,y:0},console.log(`Ship destroyed! Lives remaining: ${t.lives}`)):this.endGame(t,"gameOver","Ship destroyed! No lives remaining."))}static checkGameEndConditions(t){if(!t.selectedMission)return;const e=t.selectedMission,s=P.getPlayerPlanets(t.planets),i=t.planets.length,a=t.asteroids.length===0;switch(e.victoryCondition){case"allPlanetsColonized":if(s.length===i&&i>0){this.endGame(t,"victory","Mission Complete! All planets colonized!");return}break;case"allAsteroidsMined":if(a){this.endGame(t,"victory","Mission Complete! All asteroids mined!");return}break;case"allEnemiesDefeated":const o=t.asteroids.some(c=>c.isCosmicEgg),r=t.enemies.some(c=>c.active&&c.enemyType&&c.enemyType!=="normal"),n=t.enemies.some(c=>c.active&&(!c.enemyType||c.enemyType==="normal"));if(!o&&!r&&!n){this.endGame(t,"victory","Mission Complete! All threats eliminated!");return}break}}static resetGame(t){t.lives=t.maxLives,t.gameStatus="playing",t.gameEndReason="",t.ship.hullStrength=t.ship.maxHullStrength,t.ship.energy=t.ship.maxEnergy,t.ship.position={x:0,y:0},t.ship.velocity={x:0,y:0},t.ship.cargoMaterials=0,t.ship.cargoGems=0,t.projectiles=[],t.resourceDrops=[],t.enemies=[],t.particles=[],t.camera={x:0,y:0},t.lastEnemySpawn=0,t.spaceMonsterWarnings=[],t.selectedMission=null,t.upgradeState=A.createInitialUpgradeState(),t.botState=v.createInitialBotState(),t.finalStats={totalMaterials:0,totalGems:0,asteroidsDestroyed:0,enemiesDestroyed:0,planetsOwned:0,spaceMonsterKills:0,basesBuilt:0,playTime:0}}static endGame(t,e,s){var a;t.gameStatus=e,t.gameEndReason=s,k.stopTimer(t.gameTimer);const i=N.extractStatsFromGameState(t,t.gameTimer);if(t.finalStats={totalMaterials:i.materialsCollected,totalGems:t.ship.cargoGems,asteroidsDestroyed:i.asteroidsDestroyed,enemiesDestroyed:i.enemiesDestroyed,planetsOwned:i.planetsConquered,spaceMonsterKills:i.spaceMonsterKills,basesBuilt:i.basesBuilt,playTime:i.playTime},e==="victory"&&t.selectedMission){const o=N.calculateScore(i),r=`Player_${Date.now().toString(36).substr(-4)}`;X.saveScore({playerName:r,score:o.totalScore,rank:o.rank,mission:t.selectedMission.name,shipRole:((a=t.selectedRole)==null?void 0:a.name)||"Unknown",playTime:i.playTime,stats:{materialsCollected:i.materialsCollected,asteroidsDestroyed:i.asteroidsDestroyed,enemiesDestroyed:i.enemiesDestroyed,planetsConquered:i.planetsConquered,basesBuilt:i.basesBuilt,spaceMonsterKills:i.spaceMonsterKills}})}console.log(`Game ended: ${s}`)}}class R{static initialize(){try{this.audioContext=new(window.AudioContext||window.webkitAudioContext)}catch{console.warn("Audio not supported"),this.enabled=!1}}static playMiningHit(){if(!this.enabled||!this.audioContext)return;const t=this.audioContext.createOscillator(),e=this.audioContext.createGain();t.connect(e),e.connect(this.audioContext.destination),t.frequency.setValueAtTime(200,this.audioContext.currentTime),t.frequency.exponentialRampToValueAtTime(50,this.audioContext.currentTime+.1),e.gain.setValueAtTime(.1,this.audioContext.currentTime),e.gain.exponentialRampToValueAtTime(.01,this.audioContext.currentTime+.1),t.start(),t.stop(this.audioContext.currentTime+.1)}static playResourceCollection(){if(!this.enabled||!this.audioContext)return;const t=this.audioContext.createOscillator(),e=this.audioContext.createGain();t.connect(e),e.connect(this.audioContext.destination),t.frequency.setValueAtTime(400,this.audioContext.currentTime),t.frequency.exponentialRampToValueAtTime(800,this.audioContext.currentTime+.2),e.gain.setValueAtTime(.05,this.audioContext.currentTime),e.gain.exponentialRampToValueAtTime(.01,this.audioContext.currentTime+.2),t.start(),t.stop(this.audioContext.currentTime+.2)}static playEnemyDestruction(){if(!this.enabled||!this.audioContext)return;const t=this.audioContext.createOscillator(),e=this.audioContext.createGain();t.connect(e),e.connect(this.audioContext.destination),t.frequency.setValueAtTime(150,this.audioContext.currentTime),t.frequency.exponentialRampToValueAtTime(30,this.audioContext.currentTime+.3),e.gain.setValueAtTime(.15,this.audioContext.currentTime),e.gain.exponentialRampToValueAtTime(.01,this.audioContext.currentTime+.3),t.start(),t.stop(this.audioContext.currentTime+.3)}static playWeaponFire(){if(!this.enabled||!this.audioContext)return;const t=this.audioContext.createOscillator(),e=this.audioContext.createGain();t.connect(e),e.connect(this.audioContext.destination),t.frequency.setValueAtTime(800,this.audioContext.currentTime),t.frequency.exponentialRampToValueAtTime(400,this.audioContext.currentTime+.05),e.gain.setValueAtTime(.03,this.audioContext.currentTime),e.gain.exponentialRampToValueAtTime(.01,this.audioContext.currentTime+.05),t.start(),t.stop(this.audioContext.currentTime+.05)}static playSpaceMonsterWarning(){if(!this.enabled||!this.audioContext)return;const t=this.audioContext.createOscillator(),e=this.audioContext.createGain();t.connect(e),e.connect(this.audioContext.destination),t.frequency.setValueAtTime(120,this.audioContext.currentTime),t.frequency.exponentialRampToValueAtTime(300,this.audioContext.currentTime+.3),t.frequency.exponentialRampToValueAtTime(180,this.audioContext.currentTime+.6),e.gain.setValueAtTime(.08,this.audioContext.currentTime),e.gain.exponentialRampToValueAtTime(.12,this.audioContext.currentTime+.3),e.gain.exponentialRampToValueAtTime(.01,this.audioContext.currentTime+.6),t.start(),t.stop(this.audioContext.currentTime+.6)}static playCosmicEggHeartbeat(){if(!this.enabled||!this.audioContext)return;const t=this.audioContext.createOscillator(),e=this.audioContext.createGain();t.connect(e),e.connect(this.audioContext.destination),t.frequency.setValueAtTime(80,this.audioContext.currentTime),t.frequency.exponentialRampToValueAtTime(40,this.audioContext.currentTime+.2),t.frequency.exponentialRampToValueAtTime(20,this.audioContext.currentTime+.4),e.gain.setValueAtTime(.15,this.audioContext.currentTime),e.gain.exponentialRampToValueAtTime(.08,this.audioContext.currentTime+.2),e.gain.exponentialRampToValueAtTime(.01,this.audioContext.currentTime+.4),t.start(),t.stop(this.audioContext.currentTime+.4)}}f(R,"audioContext",null),f(R,"enabled",!0);class w{static createExplosionParticles(t,e=8){const s=[];for(let i=0;i<e;i++){const a=i/e*Math.PI*2,o=m.randomBetween(50,150),r=m.randomBetween(2,6);s.push({id:m.generateId(),position:{...t},velocity:{x:Math.cos(a)*o,y:Math.sin(a)*o},color:this.getExplosionColor(),size:r,life:1,maxLife:1,type:"explosion"})}return s}static createCollectionParticles(t,e){const s=[],a=e==="rawMaterial"?"#6699cc":"#ff8800";for(let o=0;o<6;o++){const r=o/6*Math.PI*2,n=m.randomBetween(30,80);s.push({id:m.generateId(),position:{...t},velocity:{x:Math.cos(r)*n,y:Math.sin(r)*n},color:a,size:m.randomBetween(1,3),life:.8,maxLife:.8,type:"collection"})}return s}static createSparkParticles(t,e,s=4){const i=[];for(let a=0;a<s;a++){const n=Math.atan2(e.y,e.x)+(Math.random()-.5)*.5,c=m.randomBetween(80,120);i.push({id:m.generateId(),position:{...t},velocity:{x:Math.cos(n)*c,y:Math.sin(n)*c},color:"#ffff88",size:m.randomBetween(1,2),life:.3,maxLife:.3,type:"spark"})}return i}static updateParticles(t,e){for(const s of t)s.position.x+=s.velocity.x*e,s.position.y+=s.velocity.y*e,s.velocity.x*=.95,s.velocity.y*=.95,s.life-=e}static removeDeadParticles(t){return t.filter(e=>e.life>0)}static getExplosionColor(){const t=["#ff6600","#ff8800","#ffaa00","#ff4400","#cc3300"];return t[Math.floor(Math.random()*t.length)]}}class tt{static checkProjectilePlanetCollisions(t,e){const s=[];for(const i of t)if(i.active)for(const a of e){if(a.owner==="none")continue;if(m.distance(i.position,a.position)<i.radius+a.radius){s.push({planet:a,projectile:i}),i.active=!1;break}}return s}static calculatePlanetDamage(t){return t.type==="bomb"?30:t.damage||1}static calculatePlanetHP(t){return{current:t.currentHP,max:t.maxHP,baseHP:t.baseHP,baseCount:t.bases}}static getPlanetHealthRatio(t){return t.maxHP>0?t.currentHP/t.maxHP:0}static isPlanetDestroyed(t){return t.currentHP<=0}static isPlanetDamaged(t){return t.currentHP<t.maxHP}static getPlanetDamageLevel(t){const e=this.getPlanetHealthRatio(t);return e<=0?"destroyed":e<=.25?"critical":e<=.75?"damaged":"healthy"}static getRegenInfo(t){const e=t.owner!=="none"&&t.currentHP<t.maxHP,s=t.maxHP-t.currentHP,i=e?s/t.regenRate:0;return{isRegening:e,regenRate:t.regenRate,timeToFull:i}}static canAddMoreBases(t,e){return t.bases<e}static getBaseExpansionCost(t){return t}static calculateTotalPlanetValue(t){let e=100;return e+=t.bases*50,e+=t.currentHP/t.maxHP*100,e}}class q{static updateEnemyAI(t,e,s,i){const a=[],o=[];for(const r of t)if(r.active)switch(this.updateAIState(r,e,s),r.aiState){case"claiming":this.executeClaiming(r,e,a);break;case"defending":this.executeDefending(r,e,s);break;case"expanding":this.executeExpanding(r,e,o);break;case"hunting":default:this.executeHunting(r,s);break}return{claimAttempts:a,expansionAttempts:o}}static updateAIState(t,e,s){const i=P.getUnclaimedPlanets(e),a=P.getEnemyPlanets(e),o=this.findThreatenedPlanet(a,s);if(o){t.aiState="defending",t.targetPlanetId=o.id;return}const r=this.findExpandablePlanet(a,t.position);if(r&&Math.random()<.3){t.aiState="expanding",t.targetPlanetId=r.id;return}const n=this.findNearestPlanet(i,t.position);if(n&&m.distance(t.position,n.position)<this.CLAIM_PRIORITY_DISTANCE){t.aiState="claiming",t.targetPlanetId=n.id;return}t.aiState="hunting",t.targetPlanetId=void 0}static executeClaiming(t,e,s){const i=e.find(o=>o.id===t.targetPlanetId);if(!i||i.owner!=="none"){t.aiState="hunting";return}this.moveTowardTarget(t,i.position),m.distance(t.position,i.position)<=i.claimRadius&&s.push(t)}static executeDefending(t,e,s){const i=e.find(n=>n.id===t.targetPlanetId);if(!i||i.owner!=="enemy"){t.aiState="hunting";return}const a={x:s.position.x-i.position.x,y:s.position.y-i.position.y},o=m.normalize(a),r={x:i.position.x+o.x*(i.radius+50),y:i.position.y+o.y*(i.radius+50)};this.moveTowardTarget(t,r)}static executeExpanding(t,e,s){const i=e.find(o=>o.id===t.targetPlanetId);if(!i||i.owner!=="enemy"||i.bases>=5){t.aiState="hunting";return}this.moveTowardTarget(t,i.position),m.distance(t.position,i.position)<=i.claimRadius&&s.push(t)}static executeHunting(t,e){this.moveTowardTarget(t,e.position)}static moveTowardTarget(t,e){const s={x:e.x-t.position.x,y:e.y-t.position.y},i=m.normalize(s),a=80;t.velocity.x=i.x*a,t.velocity.y=i.y*a,t.rotation=Math.atan2(s.x,-s.y)}static findThreatenedPlanet(t,e){for(const s of t)if(m.distance(s.position,e.position)<this.DEFEND_PRIORITY_DISTANCE)return s;return null}static findExpandablePlanet(t,e){const s=t.filter(i=>i.bases<5);return this.findNearestPlanet(s,e)}static findNearestPlanet(t,e){if(t.length===0)return null;let s=t[0],i=m.distance(e,s.position);for(let a=1;a<t.length;a++){const o=m.distance(e,t[a].position);o<i&&(s=t[a],i=o)}return s}static getAIStateDescription(t){switch(t.aiState){case"claiming":return"Claiming Planet";case"defending":return"Defending Base";case"expanding":return"Expanding Base";case"hunting":return"Hunting Player";default:return"Unknown"}}}f(q,"CLAIM_PRIORITY_DISTANCE",300),f(q,"DEFEND_PRIORITY_DISTANCE",400);const z=[{id:"explorer",name:"Explorer",description:"Balanced stats for versatile gameplay. Good energy and moderate cargo capacity.",stats:{maxEnergy:100,energyRechargeRate:15,maxHullStrength:100,maxCargoMaterials:30,maxCargoGems:20,weaponDamage:1,weaponFireRate:.15}},{id:"miner",name:"Miner",description:"High cargo capacity and energy efficiency. Lower combat effectiveness.",stats:{maxEnergy:120,energyRechargeRate:20,maxHullStrength:80,maxCargoMaterials:50,maxCargoGems:30,weaponDamage:.8,weaponFireRate:.2}},{id:"fighter",name:"Fighter",description:"High damage and fast firing weapons. Strong hull but limited cargo space.",stats:{maxEnergy:90,energyRechargeRate:12,maxHullStrength:130,maxCargoMaterials:20,maxCargoGems:15,weaponDamage:1.5,weaponFireRate:.1}}],J=[{id:"mine",name:"Mining Operation",description:"Extract all valuable resources from the asteroid field. Clear every asteroid to complete the mission.",objective:"Mine all asteroids in the sector",victoryCondition:"allAsteroidsMined"},{id:"fight",name:"Extermination Protocol",description:"Eliminate all hostile threats in the sector. Destroy all space monsters and enemy forces.",objective:"Destroy all space monsters and enemies",victoryCondition:"allEnemiesDefeated"},{id:"explore",name:"Colonial Expansion",description:"Establish dominance over the sector by claiming and fortifying all planetary bodies.",objective:"Colonize all planets in the sector",victoryCondition:"allPlanetsColonized"}],Q=[{id:"normal",name:"Normal",description:"Standard difficulty. Balanced enemy attacks and moderate space monster encounters.",enemySpawnMultiplier:1,enemyCountMultiplier:1,cosmicEggMultiplier:1},{id:"hard",name:"Hard",description:"Increased enemy aggression. More frequent attacks and additional space monsters lurking.",enemySpawnMultiplier:.6,enemyCountMultiplier:1.5,cosmicEggMultiplier:1.5},{id:"nightmare",name:"Make it Stop!",description:"Relentless assault. Overwhelming enemy forces and space monsters everywhere!",enemySpawnMultiplier:.4,enemyCountMultiplier:2,cosmicEggMultiplier:2}];class C{static checkCosmicEggDestruction(t,e){const s=[],i=[];for(const a of t)if(a.isCosmicEgg&&a.health<=0){const o=this.createSpaceMonster(a,e);s.push(o),i.push({...a.position}),console.log(`Cosmic egg cracked! ${a.monsterType} space monster emerges!`)}return{spaceMonsters:s,eggPositions:i}}static createSpaceMonster(t,e){const s=t.monsterType||"spider",i=50;let a;switch(s){case"spider":a=18;break;case"centipede":a=20;break;case"beetle":a=19;break;default:a=18}return{id:m.generateId(),position:{...t.position},velocity:{x:0,y:0},rotation:0,radius:a,health:i,maxHealth:i,lastFireTime:0,active:!0,spawnTime:performance.now()/1e3,aiState:"hunting",targetPlanetId:void 0,enemyType:s,spiralAngle:Math.random()*Math.PI*2,spiralRadius:m.randomBetween(80,120),hatchState:"dormant",hatchTime:0,burstCooldown:0,burstDuration:0,graceEndTime:performance.now()/1e3+3,stunEndTime:0}}static updateSpaceMonsters(t,e,s){const i=performance.now()/1e3;for(const a of t)if(!(!a.active||!a.enemyType||a.enemyType==="normal")){if(a.hatchTime!==void 0&&(a.hatchTime+=s),a.hatchState==="dormant"){a.hatchTime>=2&&(a.hatchState="awakening",console.log(`${a.enemyType} space monster awakening...`));continue}else if(a.hatchState==="awakening"){a.hatchTime>=3&&(a.hatchState="active",a.burstCooldown=0,console.log(`${a.enemyType} space monster is now active and hunting!`));continue}if(a.hatchState==="active"){if(a.stunEndTime!==void 0&&i<a.stunEndTime){a.velocity.x=0,a.velocity.y=0;continue}if(a.spiralAngle!==void 0&&a.spiralRadius!==void 0){a.burstCooldown!==void 0&&(a.burstCooldown-=s),a.burstDuration!==void 0&&(a.burstDuration-=s);const o=a.burstCooldown<=0&&a.burstDuration<=0,r=a.burstDuration>0;o&&(a.burstDuration=m.randomBetween(.8,1.5),a.burstCooldown=m.randomBetween(2,4));let n=0;r?(n=140,a.spiralAngle+=s*2):(n=30,a.spiralAngle+=s*.5);const c={x:e.x+Math.cos(a.spiralAngle)*a.spiralRadius,y:e.y+Math.sin(a.spiralAngle)*a.spiralRadius},l={x:c.x-a.position.x,y:c.y-a.position.y};if(Math.sqrt(l.x*l.x+l.y*l.y)>0){const d=m.normalize(l);a.velocity.x=d.x*n,a.velocity.y=d.y*n,a.rotation=Math.atan2(l.x,-l.y)}a.position.x+=a.velocity.x*s,a.position.y+=a.velocity.y*s,r?a.spiralRadius=Math.max(40,a.spiralRadius-s*15):a.spiralRadius=Math.max(40,a.spiralRadius-s*5)}}}}static createSpaceMonsterDrops(t){if(!t.enemyType||t.enemyType==="normal")return[];const e=[],s=80,i=Math.floor(s*.6),a=Math.floor(s*.4);console.log(`Space monster defeated! Dropping ${i} materials and ${a} gems!`);for(let o=0;o<i;o++)e.push({id:m.generateId(),position:{x:t.position.x+(Math.random()-.5)*120,y:t.position.y+(Math.random()-.5)*120},type:"rawMaterial",radius:6,collected:!1,velocity:{x:(Math.random()-.5)*200,y:(Math.random()-.5)*200}});for(let o=0;o<a;o++)e.push({id:m.generateId(),position:{x:t.position.x+(Math.random()-.5)*100,y:t.position.y+(Math.random()-.5)*100},type:"powerGem",radius:8,collected:!1,velocity:{x:(Math.random()-.5)*180,y:(Math.random()-.5)*180}});return e}static isSpaceMonster(t){return t.enemyType!==void 0&&t.enemyType!=="normal"}static stunSpaceMonster(t,e=3){if(!this.isSpaceMonster(t))return;const s=performance.now()/1e3;t.stunEndTime=s+e,t.velocity.x=0,t.velocity.y=0,console.log(`${t.enemyType} space monster stunned for ${e} seconds!`)}static isSpaceMonsterStunned(t){return!this.isSpaceMonster(t)||t.stunEndTime===void 0?!1:performance.now()/1e3<t.stunEndTime}}class rt{constructor(t){f(this,"gameState");f(this,"renderSystem");f(this,"inputSystem");f(this,"lastTime",0);f(this,"isRunning",!1);f(this,"gamePhase","roleSelection");f(this,"selectedRoleIndex",0);f(this,"selectedMissionIndex",0);f(this,"selectedDifficultyIndex",0);f(this,"selectedRole",null);f(this,"selectedDifficulty",null);f(this,"showQuitConfirmation",!1);f(this,"failsafeActive",!1);f(this,"failsafeSpawnCounter",0);f(this,"currentLevel",1);f(this,"gameLoop",()=>{if(!this.isRunning)return;const t=performance.now(),e=Math.min((t-this.lastTime)/1e3,.016);this.lastTime=t,this.gamePhase==="roleSelection"?this.updateRoleSelection():this.gamePhase==="missionSelection"?this.updateMissionSelection():this.gamePhase==="difficultySelection"?this.updateDifficultySelection():this.update(e),this.render(),this.inputSystem.clearFrameInput(),requestAnimationFrame(this.gameLoop)});this.renderSystem=new ot(t),this.inputSystem=new nt(t),R.initialize(),this.gameState=this.createInitialGameState()}createInitialGameState(){const t={asteroidCount:35,asteroidSizeMin:15,asteroidSizeMax:40,minSpacing:80,worldWidth:2e3,worldHeight:2e3,asteroidHealth:3,powerGemDropRate:.25,enemySpawnInterval:8,enemyHealth:3,enemyDespawnDistance:1200,enemyDespawnTime:120,enemyLifetime:900,planetCount:4,planetSizeMin:60,planetSizeMax:100,planetMinSpacing:200,baseCost:20,maxBasesPerPlanet:5,miningDamage:1,enemyDamage:1,collisionDamageMultiplier:.1},e=F.generateAsteroidField(t,1),s=P.generatePlanets(t,e),i=A.createInitialUpgradeState(),a=v.createInitialBotState(),o=k.createTimer();return{ship:E.createShip(),asteroids:e,planets:s,projectiles:[],resourceDrops:[],enemies:[],particles:[],worldConfig:t,camera:{x:0,y:0},lastEnemySpawn:0,lives:3,maxLives:3,gameStatus:"playing",gameEndReason:"",upgradeState:i,botState:a,spaceMonsterWarnings:[],selectedMission:null,selectedRole:null,gameTimer:o,currentLevel:this.currentLevel,finalStats:{totalMaterials:0,totalGems:0,asteroidsDestroyed:0,enemiesDestroyed:0,planetsOwned:0,spaceMonsterKills:0,basesBuilt:0,playTime:0}}}start(){this.isRunning||(this.isRunning=!0,this.lastTime=performance.now(),this.gameLoop())}stop(){this.isRunning=!1}updateRoleSelection(){if(this.showQuitConfirmation){this.handleQuitConfirmation();return}if(this.inputSystem.wasKeyJustPressed("KeyQ")){this.showQuitConfirmation=!0;return}(this.inputSystem.wasKeyJustPressed("ArrowUp")||this.inputSystem.wasKeyJustPressed("KeyW"))&&(this.selectedRoleIndex=Math.max(0,this.selectedRoleIndex-1)),(this.inputSystem.wasKeyJustPressed("ArrowDown")||this.inputSystem.wasKeyJustPressed("KeyS"))&&(this.selectedRoleIndex=Math.min(z.length-1,this.selectedRoleIndex+1)),(this.inputSystem.wasKeyJustPressed("Enter")||this.inputSystem.wasKeyJustPressed("Space"))&&(this.selectedRole=z[this.selectedRoleIndex],this.gamePhase="difficultySelection",this.selectedDifficultyIndex=0,console.log(`Selected role: ${this.selectedRole.name}. Now select difficulty...`))}updateDifficultySelection(){if(this.showQuitConfirmation){this.handleQuitConfirmation();return}if(this.inputSystem.wasKeyJustPressed("KeyQ")){this.showQuitConfirmation=!0;return}(this.inputSystem.wasKeyJustPressed("ArrowUp")||this.inputSystem.wasKeyJustPressed("KeyW"))&&(this.selectedDifficultyIndex=Math.max(0,this.selectedDifficultyIndex-1)),(this.inputSystem.wasKeyJustPressed("ArrowDown")||this.inputSystem.wasKeyJustPressed("KeyS"))&&(this.selectedDifficultyIndex=Math.min(Q.length-1,this.selectedDifficultyIndex+1)),(this.inputSystem.wasKeyJustPressed("Enter")||this.inputSystem.wasKeyJustPressed("Space"))&&(this.selectedDifficulty=Q[this.selectedDifficultyIndex],this.gamePhase="missionSelection",this.selectedMissionIndex=0,console.log(`Selected difficulty: ${this.selectedDifficulty.name}. Now select mission...`)),this.inputSystem.wasKeyJustPressed("Escape")&&(this.gamePhase="roleSelection",console.log("Returned to role selection"))}updateMissionSelection(){if(this.showQuitConfirmation){this.handleQuitConfirmation();return}if(this.inputSystem.wasKeyJustPressed("KeyQ")){this.showQuitConfirmation=!0;return}(this.inputSystem.wasKeyJustPressed("ArrowUp")||this.inputSystem.wasKeyJustPressed("KeyW"))&&(this.selectedMissionIndex=Math.max(0,this.selectedMissionIndex-1)),(this.inputSystem.wasKeyJustPressed("ArrowDown")||this.inputSystem.wasKeyJustPressed("KeyS"))&&(this.selectedMissionIndex=Math.min(J.length-1,this.selectedMissionIndex+1)),(this.inputSystem.wasKeyJustPressed("Enter")||this.inputSystem.wasKeyJustPressed("Space"))&&this.selectMission(J[this.selectedMissionIndex]),this.inputSystem.wasKeyJustPressed("Escape")&&(this.gamePhase="roleSelection",console.log("Returned to role selection"))}selectMission(t){this.gamePhase="playing",this.gameState=this.createInitialGameState(),this.gameState.ship=E.createShip(this.selectedRole),this.gameState.selectedMission=t,this.gameState.selectedRole=this.selectedRole,this.selectedDifficulty&&(this.gameState.worldConfig.enemySpawnInterval*=this.selectedDifficulty.enemySpawnMultiplier,this.gameState.worldConfig.cosmicEggMultiplier=this.selectedDifficulty.cosmicEggMultiplier,this.gameState.asteroids=F.generateAsteroidField(this.gameState.worldConfig,this.selectedDifficulty.cosmicEggMultiplier),this.gameState.planets=P.generatePlanets(this.gameState.worldConfig,this.gameState.asteroids),console.log(`Difficulty: ${this.selectedDifficulty.name}`),console.log(`Enemy spawn interval: ${this.gameState.worldConfig.enemySpawnInterval}s (${Math.round(this.selectedDifficulty.enemySpawnMultiplier*100)}% of normal)`),console.log(`Cosmic egg multiplier: ${this.selectedDifficulty.cosmicEggMultiplier}x`)),this.gameState.gameTimer=k.createTimer(),this.gameState.worldConfig.enemySpawnInterval=3,this.gameState.lastEnemySpawn=performance.now()/1e3,console.log(`Mission selected: ${t.name}`),console.log(`Objective: ${t.objective}`),console.log(`Generated ${this.gameState.asteroids.length} asteroids`)}update(t){var p;if(this.gameState.gameStatus!=="playing"){if(this.showQuitConfirmation){this.handleQuitConfirmation();return}if(this.inputSystem.wasKeyJustPressed("KeyQ")){this.showQuitConfirmation=!0;return}this.inputSystem.wasKeyJustPressed("KeyR")&&this.restartGame(),this.gameState.gameStatus==="victory"&&this.inputSystem.wasKeyJustPressed("KeyN")&&this.advanceToNextLevel(),this.inputSystem.wasKeyJustPressed("KeyM")&&this.renderSystem.toggleMinimap();return}if(M.isUpgradeMenuOpen()||M.isBotMenuOpen()){this.handleMenuInputs();return}if(this.showQuitConfirmation){this.handleQuitConfirmation();return}if(this.inputSystem.wasKeyJustPressed("KeyQ")){this.showQuitConfirmation=!0;return}const e=performance.now()/1e3,s=this.inputSystem.getShipInput();if(this.inputSystem.wasKeyJustPressed("KeyR")){this.restartGame();return}this.inputSystem.wasKeyJustPressed("KeyM")&&(this.renderSystem.toggleMinimap(),console.log(`Minimap ${this.renderSystem.isMinimapVisible()?"enabled":"disabled"}`)),this.handleMenuInputs(),this.handlePlanetInteractions();const i=q.updateEnemyAI(this.gameState.enemies,this.gameState.planets,this.gameState.ship,t);for(const h of i.claimAttempts){const g=P.checkEnemyPlanetClaiming(h,this.gameState.planets);g&&P.claimPlanet(g,"enemy")}for(const h of i.expansionAttempts){const g=P.checkEnemyBaseExpansion(h,this.gameState.planets);g&&P.addBase(g,"enemy")}B.shouldSpawnEnemy(e,this.gameState.lastEnemySpawn,this.gameState.worldConfig.enemySpawnInterval)&&(this.spawnEnemyWave(e),this.scheduleNextAttack());const a=B.updateEnemies(this.gameState.enemies,this.gameState.ship,t,this.gameState.worldConfig);C.updateSpaceMonsters(this.gameState.enemies,this.gameState.ship.position,t);for(const h of a.shouldFire){const g=U.createEnemyProjectile(h);this.gameState.projectiles.push(g)}if(s.fire&&E.canFire(this.gameState.ship,e)){const h=$.createProjectile(this.gameState.ship);this.gameState.projectiles.push(h),E.consumeFireEnergy(this.gameState.ship,e),R.playWeaponFire()}if(s.bomb&&this.inputSystem.wasKeyJustPressed("KeyB"))if(E.canLaunchBomb(this.gameState.ship)){const h=$.createBomb(this.gameState.ship,this.gameState.enemies);this.gameState.projectiles.push(h),E.launchBomb(this.gameState.ship),console.log(`Heat-seeking bomb launched! Bombs remaining: ${this.gameState.ship.bombs}`)}else console.log("Cannot launch bomb: no bombs available");if(s.buyBomb&&this.inputSystem.wasKeyJustPressed("KeyN")&&(E.canBuyBomb(this.gameState.ship)?E.buyBomb(this.gameState.ship)&&console.log(`Bomb purchased for 10 materials! Bombs: ${this.gameState.ship.bombs}/${this.gameState.ship.maxBombs}, Materials: ${this.gameState.ship.cargoMaterials}`):this.gameState.ship.bombs>=this.gameState.ship.maxBombs?console.log(`Cannot buy bomb: already at maximum capacity (${this.gameState.ship.maxBombs}/${this.gameState.ship.maxBombs})`):console.log("Cannot buy bomb: insufficient materials (need 10)")),s.emergencyMelee&&this.inputSystem.wasKeyJustPressed("KeyK")&&(E.canUseMeleeWeapon(this.gameState.ship)?E.activateMeleeWeapon(this.gameState.ship):this.gameState.ship.cargoGems<10?console.log("Cannot use melee weapon: need 10 power gems"):console.log("Cannot use melee weapon: already charging")),E.isMeleeReady(this.gameState.ship)){const h=$.createMeleeLightning(this.gameState.ship,this.gameState.enemies),g=$.damageMeleeTargets(h.targets,25);for(const T of g){let b;C.isSpaceMonster(T)?b=C.createSpaceMonsterDrops(T):b=U.createEnemyDrops(T),this.gameState.resourceDrops.push(...b);const D=w.createExplosionParticles(T.position,10);this.gameState.particles.push(...D)}for(const T of h.lightningBolts){const b=w.createSparkParticles(T.startPos,{x:T.endPos.x-T.startPos.x,y:T.endPos.y-T.startPos.y},15);this.gameState.particles.push(...b)}R.playEnemyDestruction(),this.gameState.ship.meleeCharging=!1,this.gameState.ship.isInvincible=!1}E.updateShip(this.gameState.ship,s,t),this.checkShipBoundary();const o=v.updateBots(this.gameState.botState,this.gameState.ship,this.gameState.enemies,this.gameState.resourceDrops,this.gameState.asteroids,t);if(this.gameState.projectiles.push(...o.projectiles),o.contactDamageResults){for(const h of o.contactDamageResults.enemies){let g;C.isSpaceMonster(h)?g=C.createSpaceMonsterDrops(h):g=U.createEnemyDrops(h),this.gameState.resourceDrops.push(...g);const T=w.createExplosionParticles(h.position,10);this.gameState.particles.push(...T)}for(const h of o.contactDamageResults.asteroids){const g=j.createResourceDrops(h);this.gameState.resourceDrops.push(...g);const T=w.createExplosionParticles(h.position,12);this.gameState.particles.push(...T)}}for(const h of o.collectedResources){const g=w.createCollectionParticles(h.position,h.type);this.gameState.particles.push(...g),R.playResourceCollection()}E.updatePassiveGeneration(this.gameState.ship,this.gameState.planets,t),$.updateProjectiles(this.gameState.projectiles,t,this.gameState.worldConfig),$.updateBombs(this.gameState.projectiles,this.gameState.enemies,t),this.gameState.projectiles=$.removeInactiveProjectiles(this.gameState.projectiles);const r=j.checkProjectileAsteroidCollisions(this.gameState.projectiles,this.gameState.asteroids),n=tt.checkProjectilePlanetCollisions(this.gameState.projectiles,this.gameState.planets),c=U.checkProjectileEnemyCollisions(this.gameState.projectiles,this.gameState.enemies);for(const h of r){if(j.damageAsteroid(h.asteroid,this.gameState.worldConfig.miningDamage)){if(this.gameState.finalStats.asteroidsDestroyed++,h.asteroid.isCosmicEgg){const{spaceMonsters:b}=C.checkCosmicEggDestruction([h.asteroid],this.gameState.ship.position);this.gameState.enemies.push(...b);for(const O of b){const st={id:m.generateId(),startTime:performance.now()/1e3,duration:4,monsterId:O.id};this.gameState.spaceMonsterWarnings.push(st),R.playSpaceMonsterWarning(),console.log(`⚠️ SPACE MONSTER WARNING! ${(p=O.enemyType)==null?void 0:p.toUpperCase()} detected!`)}const D=w.createExplosionParticles(h.asteroid.position,20);this.gameState.particles.push(...D),R.playEnemyDestruction()}const T=j.createResourceDrops(h.asteroid);if(this.gameState.resourceDrops.push(...T),!h.asteroid.isCosmicEgg){const b=w.createExplosionParticles(h.asteroid.position,12);this.gameState.particles.push(...b)}}else{const T=w.createSparkParticles(h.projectile.position,h.projectile.velocity);this.gameState.particles.push(...T)}R.playMiningHit()}for(const h of n){const g=tt.calculatePlanetDamage(h.projectile),T=P.damagePlanet(h.planet,g),b=w.createSparkParticles(h.projectile.position,h.projectile.velocity,8);if(this.gameState.particles.push(...b),T){const D=h.projectile.type==="bomb"?"bomb":"projectile";console.log(`Planet base destroyed by ${D} (${g} damage) and unclaimed!`);const O=w.createExplosionParticles(h.planet.position,15);this.gameState.particles.push(...O)}else{const D=h.projectile.type==="bomb"?"bomb":"projectile";console.log(`Planet hit by ${D} for ${g} damage! HP: ${Math.ceil(h.planet.currentHP)}/${h.planet.maxHP}`)}R.playMiningHit()}for(const h of c)if(h.projectile.type==="bomb"&&C.isSpaceMonster(h.enemy))if(C.stunSpaceMonster(h.enemy,3),B.damageEnemy(h.enemy,5)){h.enemy.active=!1,this.gameState.finalStats.spaceMonsterKills++,this.gameState.finalStats.enemiesDestroyed++;const b=C.createSpaceMonsterDrops(h.enemy);this.gameState.resourceDrops.push(...b);const D=w.createExplosionParticles(h.enemy.position,10);this.gameState.particles.push(...D),R.playEnemyDestruction(),console.log(`Space monster ${h.enemy.enemyType} destroyed by bomb after taking damage!`)}else console.log(`Space monster ${h.enemy.enemyType} stunned by bomb! HP: ${h.enemy.health}/${h.enemy.maxHealth}`);else{const g=h.projectile.type==="bomb"?999:this.gameState.worldConfig.enemyDamage;if(B.damageEnemy(h.enemy,g)){h.enemy.active=!1,C.isSpaceMonster(h.enemy)&&this.gameState.finalStats.spaceMonsterKills++,this.gameState.finalStats.enemiesDestroyed++;let b;C.isSpaceMonster(h.enemy)?(b=C.createSpaceMonsterDrops(h.enemy),console.log(`Space monster ${h.enemy.enemyType} defeated! Massive resource drop!`)):b=U.createEnemyDrops(h.enemy),this.gameState.resourceDrops.push(...b);const D=w.createExplosionParticles(h.enemy.position,10);if(this.gameState.particles.push(...D),R.playEnemyDestruction(),C.isSpaceMonster(h.enemy)){const O=h.projectile.type==="bomb"?"bomb":"projectile";console.log(`Space monster ${h.enemy.enemyType} destroyed by ${O}!`)}else{const O=h.projectile.type==="bomb"?"bomb":"projectile";console.log(`Enemy destroyed by ${O}!`)}}}this.gameState.asteroids=j.removeDestroyedAsteroids(this.gameState.asteroids),this.gameState.enemies=B.removeInactiveEnemies(this.gameState.enemies),P.updatePlanetRegen(this.gameState.planets,t),P.updatePlanetBotGeneration(this.gameState.planets,t);const l=P.updatePlanetBots(this.gameState.planets,this.gameState.enemies,t);this.gameState.projectiles.push(...l),W.updateResourceDrops(this.gameState.resourceDrops,t),W.updateResourceAttraction(this.gameState.resourceDrops,this.gameState.ship,t);const u=W.checkResourceCollection(this.gameState.ship,this.gameState.resourceDrops);for(const h of u){const g=w.createCollectionParticles(h.position,h.type);this.gameState.particles.push(...g),R.playResourceCollection()}this.gameState.resourceDrops=W.removeCollectedResources(this.gameState.resourceDrops);const d=L.checkShipAsteroidCollision(this.gameState.ship,this.gameState.asteroids);d&&L.resolveShipAsteroidCollision(this.gameState.ship,d);const y=L.checkShipProjectileCollision(this.gameState.ship,this.gameState.projectiles);for(const h of y){L.resolveShipProjectileHit(this.gameState.ship,h);const g=w.createSparkParticles(h.position,{x:-h.velocity.x,y:-h.velocity.y},6);this.gameState.particles.push(...g)}const S=L.checkShipEnemyCollision(this.gameState.ship,this.gameState.enemies);if(S&&L.resolveShipEnemyCollision(this.gameState.ship,S).enemyDestroyed){const g=w.createExplosionParticles(S.position,10);this.gameState.particles.push(...g),C.isSpaceMonster(S)&&this.gameState.finalStats.spaceMonsterKills++,this.gameState.finalStats.enemiesDestroyed++;let T;C.isSpaceMonster(S)?(T=C.createSpaceMonsterDrops(S),console.log(`Space monster ${S.enemyType} destroyed by collision! Massive resource drop!`)):T=U.createEnemyDrops(S),this.gameState.resourceDrops.push(...T),R.playEnemyDestruction(),C.isSpaceMonster(S)?console.log(`Space monster ${S.enemyType} destroyed by collision!`):console.log("Enemy destroyed by collision!")}w.updateParticles(this.gameState.particles,t),this.gameState.particles=w.removeDeadParticles(this.gameState.particles),this.gameState.spaceMonsterWarnings=this.gameState.spaceMonsterWarnings.filter(h=>e-h.startTime<h.duration),I.updateCamera(this.gameState.camera,this.gameState.ship,t),this.updateCosmicEggPulses(t),V.checkShipDestruction(this.gameState),V.checkGameEndConditions(this.gameState)}updateCosmicEggPulses(t){const e=performance.now()/1e3,s=this.renderSystem.getCanvas();for(const i of this.gameState.asteroids)if(i.isCosmicEgg){if(i.lastPulseTime===void 0&&(i.lastPulseTime=e+Math.random()*12,i.pulsePhase=0),e-i.lastPulseTime>=12){i.lastPulseTime=e,i.pulsePhase=1;const a=I.worldToScreen(i.position,this.gameState.camera,s);a.x>=-i.radius&&a.x<=s.width+i.radius&&a.y>=-i.radius&&a.y<=s.height+i.radius&&R.playCosmicEggHeartbeat()}i.pulsePhase!==void 0&&i.pulsePhase>0&&(i.pulsePhase=Math.max(0,i.pulsePhase-t))}}handleMenuInputs(){if(this.inputSystem.wasKeyJustPressed("Escape")&&(M.isUpgradeMenuOpen()||M.isBotMenuOpen())){M.closeAllMenus(),console.log("Menu closed with ESC key");return}if(this.inputSystem.wasKeyJustPressed("KeyU")&&(M.toggleUpgradeMenu(),M.isUpgradeMenuOpen()&&console.log("Upgrade menu opened - use TAB to navigate, ENTER to purchase"),console.log(`Upgrade menu ${M.isUpgradeMenuOpen()?"opened":"closed"}`)),this.inputSystem.wasKeyJustPressed("KeyP"))if(M.toggleBotMenu(),M.isBotMenuOpen()){const t=v.canShowPurchaseOption(this.gameState.ship,this.gameState.botState);console.log(t?"Bot menu opened - use TAB to navigate, ENTER to purchase":`Bot menu opened - collect ${this.gameState.botState.cargoThreshold} total cargo to unlock bot purchases`)}else console.log("Bot menu closed");this.inputSystem.wasKeyJustPressed("Tab")&&(M.isUpgradeMenuOpen()?M.navigateUpgradeMenu("down"):M.isBotMenuOpen()&&M.navigateBotMenu("down")),(this.inputSystem.wasKeyJustPressed("ArrowUp")||this.inputSystem.wasKeyJustPressed("KeyW"))&&(M.isUpgradeMenuOpen()?M.navigateUpgradeMenu("up"):M.isBotMenuOpen()&&M.navigateBotMenu("up")),(this.inputSystem.wasKeyJustPressed("ArrowDown")||this.inputSystem.wasKeyJustPressed("KeyS"))&&(M.isUpgradeMenuOpen()?M.navigateUpgradeMenu("down"):M.isBotMenuOpen()&&M.navigateBotMenu("down")),this.inputSystem.wasKeyJustPressed("Enter")&&(M.isUpgradeMenuOpen()?this.handleUpgradePurchase():M.isBotMenuOpen()&&this.handleBotPurchase())}handlePlanetInteractions(){const t=P.checkPlanetClaiming(this.gameState.ship,this.gameState.planets);t&&P.canPlayerAffordBase(this.gameState.ship,this.gameState.worldConfig.baseCost)&&P.consumeBaseCost(this.gameState.ship,this.gameState.worldConfig.baseCost)&&(P.claimPlanet(t,"player"),console.log(`Planet claimed! Cost: ${this.gameState.worldConfig.baseCost} materials`));const e=P.checkBaseExpansion(this.gameState.ship,this.gameState.planets);e&&P.canPlayerAffordBase(this.gameState.ship,this.gameState.worldConfig.baseCost)&&P.consumeBaseCost(this.gameState.ship,this.gameState.worldConfig.baseCost)&&(P.addBase(e,"player"),console.log(`Base expanded! Cost: ${this.gameState.worldConfig.baseCost} materials`))}render(){this.gamePhase==="roleSelection"?this.renderSystem.renderRoleSelection(z,this.selectedRoleIndex):this.gamePhase==="difficultySelection"?this.renderSystem.renderDifficultySelection(Q,this.selectedDifficultyIndex,this.gameState):this.gamePhase==="missionSelection"?this.renderSystem.renderMissionSelection(J,this.selectedMissionIndex):this.renderSystem.render(this.gameState),this.showQuitConfirmation&&this.renderSystem.renderQuitConfirmation()}getGameState(){return this.gameState}regenerateWorld(){this.gameState.asteroids=F.generateAsteroidField(this.gameState.worldConfig),this.gameState.planets=P.generatePlanets(this.gameState.worldConfig,this.gameState.asteroids),this.gameState.projectiles=[],this.gameState.resourceDrops=[],this.gameState.enemies=[],this.gameState.particles=[],this.gameState.lastEnemySpawn=0,console.log(`Regenerated ${this.gameState.asteroids.length} asteroids and ${this.gameState.planets.length} planets`)}startNewGame(){this.currentLevel=1,this.gamePhase="roleSelection",this.selectedRoleIndex=0,this.selectedMissionIndex=0,this.selectedRole=null,console.log("Returning to role selection...")}restartGame(){if(this.selectedRole&&this.gameState.selectedMission){const t=this.gameState.selectedMission;this.gameState=this.createInitialGameState(),this.gameState.ship=E.createShip(this.selectedRole),this.gameState.selectedMission=t,this.gameState.gameTimer=k.createTimer(),this.gameState.worldConfig.enemySpawnInterval=3,this.gameState.lastEnemySpawn=performance.now()/1e3,console.log(`Game restarted with ${this.selectedRole.name} role and ${this.gameState.selectedMission.name} mission!`),console.log(`Generated ${this.gameState.asteroids.length} asteroids and ${this.gameState.planets.length} planets`)}else this.startNewGame()}startNewGameWithCurrentRole(){V.resetGame(this.gameState),this.gameState.asteroids=F.generateAsteroidField(this.gameState.worldConfig),this.gameState.planets=P.generatePlanets(this.gameState.worldConfig,this.gameState.asteroids),this.gameState.worldConfig.enemySpawnInterval=30,console.log(`New game started with ${this.gameState.asteroids.length} asteroids and ${this.gameState.planets.length} planets`)}handleQuitConfirmation(){(this.inputSystem.wasKeyJustPressed("KeyQ")||this.inputSystem.wasKeyJustPressed("Enter"))&&(this.gamePhase="roleSelection",this.selectedRoleIndex=0,this.selectedMissionIndex=0,this.selectedRole=null,this.showQuitConfirmation=!1,console.log("Returned to title screen")),(this.inputSystem.wasKeyJustPressed("KeyN")||this.inputSystem.wasKeyJustPressed("Escape"))&&(this.showQuitConfirmation=!1)}advanceToNextLevel(){var s,i;this.currentLevel++,this.gameState.currentLevel=this.currentLevel;const t=35,e=(s=this.selectedDifficulty)!=null&&s.enemySpawnMultiplier?8*this.selectedDifficulty.enemySpawnMultiplier:8;this.gameState.worldConfig.asteroidCount=t+(this.currentLevel-1)*3,this.gameState.worldConfig.enemySpawnInterval=e*Math.pow(.95,this.currentLevel-1),this.gameState.asteroids=F.generateAsteroidField(this.gameState.worldConfig,((i=this.selectedDifficulty)==null?void 0:i.cosmicEggMultiplier)||1),this.gameState.planets=P.generatePlanets(this.gameState.worldConfig,this.gameState.asteroids),this.gameState.projectiles=[],this.gameState.resourceDrops=[],this.gameState.enemies=[],this.gameState.particles=[],this.gameState.spaceMonsterWarnings=[],this.gameState.lastEnemySpawn=0,this.gameState.gameStatus="playing",this.gameState.gameEndReason="",this.gameState.ship.position={x:0,y:0},this.gameState.ship.velocity={x:0,y:0},this.gameState.ship.hullStrength=this.gameState.ship.maxHullStrength,this.gameState.ship.energy=this.gameState.ship.maxEnergy,this.gameState.ship.isInvincible=!1,this.gameState.ship.meleeCharging=!1,this.gameState.camera={x:0,y:0},this.gameState.gameTimer=k.createTimer(),this.gameState.lastEnemySpawn=performance.now()/1e3,console.log(`Advanced to Level ${this.currentLevel}!`),console.log(`Asteroids: ${this.gameState.worldConfig.asteroidCount}, Enemy spawn rate: ${this.gameState.worldConfig.enemySpawnInterval.toFixed(1)}s`)}spawnEnemyWave(t){var r;this.checkFailsafeActivation();const e=t-this.gameState.lastEnemySpawn<10,s=e?1:Math.floor(Math.random()*5)+1,i=((r=this.selectedDifficulty)==null?void 0:r.enemyCountMultiplier)||1,a=Math.max(1,Math.floor(s*i)),o=this.failsafeActive&&this.failsafeSpawnCounter%2===0;this.failsafeActive&&this.failsafeSpawnCounter++,console.log(e?"First enemy scout incoming!":`Enemy attack wave incoming! ${a} enemies spawning! (${Math.round(i*100)}% of normal)`);for(let n=0;n<a;n++)setTimeout(()=>{const c=B.createEnemy(this.gameState.ship.position);o&&(c.isResourceCarrier=!0),this.gameState.enemies.push(c),console.log(e?"Scout enemy spawned!":`Enemy ${n+1}/${a} spawned!`)},n*Math.random()*2e3)}checkFailsafeActivation(){const t=this.gameState.asteroids.length,e=this.gameState.gameStatus==="playing";t===0&&e&&!this.failsafeActive&&(this.failsafeActive=!0,this.failsafeSpawnCounter=0,console.log("🚨 FAIL-SAFE ACTIVATED: All asteroids mined but mission not complete! Resource-carrying enemies will spawn every other wave."))}scheduleNextAttack(){const s=Math.random()*112+8;this.gameState.worldConfig.enemySpawnInterval=s,this.gameState.lastEnemySpawn=performance.now()/1e3,console.log(`Next enemy attack scheduled in ${Math.round(s)} seconds`)}handleUpgradePurchase(){const t=M.getSelectedUpgradeTab(),e=M.getSelectedUpgradeType();if(e){if(t==="ship"){const s=e;A.purchaseShipUpgrade(this.gameState.ship,this.gameState.upgradeState,s)?console.log(`Successfully upgraded ${e}!`):console.log(`Cannot upgrade ${e} - insufficient resources or max level reached`)}else if(t==="base"){const s=e;A.purchaseBaseUpgrade(this.gameState.ship,this.gameState.upgradeState,s,this.gameState.planets)?console.log(`Successfully upgraded ${e}!`):console.log(`Cannot upgrade ${e} - insufficient resources or max level reached`)}}}handleBotPurchase(){const t=v.canPurchaseBot(this.gameState.ship,this.gameState.botState),e=v.canShowPurchaseOption(this.gameState.ship,this.gameState.botState);e&&t?v.purchaseBot(this.gameState.ship,this.gameState.botState,"defense")?console.log("Defense bot purchased successfully!"):console.log("Failed to purchase bot - unknown error"):e?this.gameState.botState.bots.length>=this.gameState.botState.maxBots?console.log("Cannot purchase bot: maximum bots reached"):console.log(`Cannot purchase bot: need ${this.gameState.botState.purchaseCost.materials} materials and ${this.gameState.botState.purchaseCost.gems} gems`):console.log(`Cannot purchase bot: need ${this.gameState.botState.cargoThreshold} total cargo to unlock bots`)}checkShipBoundary(){const t=this.gameState.ship,e=this.gameState.worldConfig,s=e.worldWidth/2,i=e.worldHeight/2,a=t.isOutOfBounds;t.isOutOfBounds=t.position.x<-s||t.position.x>s||t.position.y<-i||t.position.y>i,!a&&t.isOutOfBounds?console.log("Ship crossed outside map boundary - weapons disabled!"):a&&!t.isOutOfBounds&&console.log("Ship returned to map boundary - weapons enabled!")}}const G=document.createElement("canvas");G.width=1024;G.height=768;G.style.border="2px solid #333";G.style.display="block";G.style.margin="0 auto";const H=document.createElement("div");H.style.textAlign="center";H.style.padding="20px";const Y=document.createElement("h1");Y.textContent="Space MFX (Mine, Fight, Explore!)";Y.style.color="#ffffff";Y.style.fontFamily="monospace";const et=document.createElement("div");et.innerHTML=`
  <p style="color: #cccccc; font-family: monospace; margin: 10px 0;">
    <strong>WASD/Arrows</strong> - Move (S/Down = Reverse) | <strong>B</strong> - Launch Bombs | <strong>N</strong> - Buy Bombs<br>
    <strong>M</strong> - Toggle Map | <strong>K</strong> - Lightning Weapon (10 gems)<br>
    <strong>U</strong> - Upgrades | <strong>P</strong> - Bot Menu | <strong>Q</strong> - Quit to Title<br>
    <strong>R</strong> - Restart Current Round
  </p>
`;const _=document.createElement("div");_.id="debug-info";_.style.color="#888888";_.style.fontFamily="monospace";_.style.fontSize="12px";_.style.marginTop="10px";H.appendChild(Y);H.appendChild(et);H.appendChild(G);H.appendChild(_);document.body.appendChild(H);const Z=new rt(G);Z.start();setInterval(()=>{const x=Z.getGameState(),t=x.ship;_.innerHTML=`
    Game Status: ${x.gameStatus} | Lives: ${x.lives}<br>
    Ship Position: (${Math.round(t.position.x)}, ${Math.round(t.position.y)})<br>
    Ship Velocity: (${Math.round(t.velocity.x)}, ${Math.round(t.velocity.y)})<br>
    Asteroids: ${x.asteroids.length} | Enemies: ${x.enemies.length} | Projectiles: ${x.projectiles.length} | Resources: ${x.resourceDrops.length}
  `},100);const K=document.createElement("button");K.textContent="Regenerate Asteroids";K.style.marginTop="10px";K.style.padding="10px 20px";K.style.fontSize="14px";K.onclick=()=>Z.regenerateWorld();H.appendChild(K);
